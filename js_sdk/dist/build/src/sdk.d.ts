declare type IRimdian = {
    config: IConfig;
    isReady: boolean;
    dispatchConsent: boolean;
    currentUser?: IUser;
    currentDevice?: IDevice;
    currentSession?: ISession;
    currentPageview?: IPageview;
    currentPageviewVisibleSince?: Date;
    currentPageviewDuration: number;
    currentCart?: ICart;
    itemsQueue: IItemsQueue;
    dispatchQueue: IDataImport[];
    isDispatching: boolean;
    log: (level: string, ...args: any[]) => void;
    init: (cfg: IConfig) => void;
    trackPageview: (data: IPageview) => void;
    trackCustomEvent: (data: ICustomEvent) => void;
    trackCart: (data: ICart) => void;
    trackOrder: (data: IOrder) => void;
    getCurrentUser: (callback: (user: IUser) => void) => void;
    setDeviceContext: (data: IDevice) => void;
    setSessionContext: (data: ISession) => void;
    setUserContext: (data: IUser) => void;
    saveUserProfile: () => void;
    dispatch: (useBeacon: boolean) => void;
    setDispatchConsent: (consent: boolean) => void;
    isBrowserLegit: () => boolean;
    uuidv4: () => string;
    md5: (str: string) => string;
    getReferrer: () => string | undefined;
    getTimezone: () => string | undefined;
    getQueryParam: (url: string, name: string) => string | undefined;
    getHashParam: (hash: string, name: string) => string | undefined;
    updateURLParam: (url: string, name: string, value: string) => string;
    hasAdBlocker: () => boolean;
    isPageVisible: () => boolean;
    onReadyQueue: Array<Function>;
    getCookie: (name: string) => string;
    setCookie: (name: string, value: string, seconds: number) => void;
    deleteCookie: (name: string) => void;
    _onReady: (cfg: IConfig) => void;
    _execWhenReady: (fn: () => void) => void;
    _initDispatchLoop: (useBeacon: boolean) => void;
    _postPayload: (dataImport: IDataImport, retryCount: number, useBeacon: boolean) => void;
    _post: (data: IDataImport, useBeacon: boolean, callback: (error: string) => void) => void;
    _handleUser: () => void;
    _createUser: (userExternalId: string, isAuthenticated: boolean, createdAt: string) => void;
    _enrichUserContext: () => void;
    _handleDevice: () => void;
    _createDevice: () => void;
    _handleSession: () => void;
    _startNewSession: (params: ISessionDTO) => void;
    _onPagePassive: () => void;
    _onPageActive: () => void;
    _cartHash: (data: ICart) => string;
    _localStorage: ILocalStorage;
    _addEventListener: (element: any, eventType: string, eventHandler: Function, useCapture: boolean) => void;
    _decorateURL: (e: MouseEvent) => void;
    _wipeAll: () => void;
};
declare type IConfig = {
    workspace_id: string;
    host: string;
    session_timeout: number;
    namespace: string;
    cross_domains: string[];
    ignored_origins: IOrigin[];
    version: string;
    log_level: 'error' | 'warn' | 'info' | 'debug' | 'trace';
    max_retry: number;
    from_cm: boolean;
};
declare type IOrigin = {
    utm_source: string;
    utm_medium: string;
    utm_campaign?: string;
};
declare type ISessionDTO = {
    utm_source?: string;
    utm_medium?: string;
    utm_campaign?: string;
    utm_content?: string;
    utm_term?: string;
    utm_id?: string;
    utm_id_from?: string;
};
declare type ILocalStorage = {
    get: (key: string) => string | null;
    set: (key: string, value: string) => void;
    remove: (key: string) => void;
};
declare type IUser = {
    external_id: string;
    is_authenticated: boolean;
    created_at: string;
    updated_at?: string;
    last_interaction_at?: string;
    user_centric_consent?: boolean;
    consent_all?: boolean;
    consent_personalization?: boolean;
    consent_marketing?: boolean;
    signed_up_at?: string;
    hmac?: string;
    [key: string]: any;
};
declare type IDevice = {
    external_id: string;
    created_at: string;
    updated_at?: string;
    user_agent?: string;
    resolution?: string;
    language?: string;
    ad_blocker?: boolean;
    [key: string]: any;
};
declare type ISession = {
    external_id: string;
    created_at: string;
    landing_page: string;
    device_external_id?: string;
    referrer?: string;
    timezone?: string;
    utm_source?: string;
    utm_medium?: string;
    utm_campaign?: string;
    utm_content?: string;
    utm_term?: string;
    utm_id?: string;
    utm_id_from?: string;
    duration?: number;
    pageviews_count?: number;
    interactions_count?: number;
    [key: string]: any;
};
declare type IPageview = {
    external_id: string;
    page_id: string;
    title: string;
    created_at: string;
    updated_at?: string;
    referrer?: string;
    duration?: number;
    image_url?: string;
    product_external_id?: string;
    product_sku?: string;
    product_name?: string;
    product_brand?: string;
    product_category?: string;
    product_variant_external_id?: string;
    product_variant_title?: string;
    product_price?: number;
    product_currency?: string;
    [key: string]: any;
};
declare type ICart = {
    external_id: string;
    created_at: string;
    updated_at: string;
    items: ICartItem[];
    currency?: string;
    public_url?: string;
    hash?: string;
    [key: string]: any;
};
declare type ICartItem = {
    cart_external_id: string;
    external_id: string;
    product_external_id: string;
    name: string;
    sku: string;
    price?: number;
    quantity: number;
    brand?: string;
    category?: string;
    variant_external_id?: string;
    variant_title?: string;
    image_url?: string;
    currency?: string;
    discount_codes?: string[];
    [key: string]: any;
};
declare type IOrderItem = {
    order_external_id: string;
    external_id: string;
    name: string;
    product_external_id: string;
    price?: number;
    quantity?: number;
    sku?: string;
    brand?: string;
    category?: string;
    variant_external_id?: string;
    variant_title?: string;
    image_url?: string;
};
declare type IOrder = {
    external_id: string;
    created_at: string;
    updated_at?: string;
    currency?: string;
    items: IOrderItem[];
    discount_codes?: string[];
    subtotal_price?: number;
    total_price?: number;
    cancelled_at?: string;
    cancel_reason?: string;
    [key: string]: any;
};
declare type ICustomEvent = {
    external_id: string;
    label: string;
    created_at: string;
    session_external_id: string;
    updated_at?: string;
    value?: number;
    non_interactive?: boolean;
    [key: string]: any;
};
declare type ItemData = IUser | IUserAlias | IDevice | IPageview | ICart | IOrder | ICustomEvent;
declare type IItem = {
    kind: ItemKind;
    context?: IContext;
    user?: IUser;
    user_alias?: IUserAlias;
    device?: IDevice;
    session?: ISession;
    pageview?: IPageview;
    cart?: ICart;
    order?: IOrder;
    customEvent?: ICustomEvent;
};
declare type ItemKind = 'user' | 'user_alias' | 'device' | 'session' | 'pageview' | 'cart' | 'order' | 'custom_event';
declare type IItemsQueue = {
    items: IItem[];
    add: (kind: ItemKind, data: ItemData) => void;
    addPageviewDuration: () => void;
};
declare type IContext = {
    data_sent_at?: string;
};
declare type IUserAlias = {
    from_user_external_id: string;
    to_user_external_id: string;
    to_user_is_authenticated?: boolean;
    to_user_created_at?: string;
};
declare type IDataImport = {
    id: string;
    workspace_id: string;
    items: IItem[];
    context: IContext;
    created_at: string;
};
declare const Rimdian: IRimdian;
export default Rimdian;
