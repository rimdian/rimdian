// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package service

import (
	"context"
	"github.com/rimdian/rimdian/internal/api/dto"
	"github.com/rimdian/rimdian/internal/api/entity"
	common "github.com/rimdian/rimdian/internal/common/dto"
	"sync"
	"time"
)

// Ensure, that ServiceMock does implement Service.
// If this is not the case, regenerate this file with moq.
var _ Service = &ServiceMock{}

// ServiceMock is a mock implementation of Service.
//
//	func TestSomethingThatUsesService(t *testing.T) {
//
//		// make and configure a mocked Service
//		mockedService := &ServiceMock{
//			AccountConsumeResetPasswordFunc: func(ctx context.Context, resetPasswordDTO *dto.AccountConsumeResetPassword) (*dto.AccountLoginResult, int, error) {
//				panic("mock out the AccountConsumeResetPassword method")
//			},
//			AccountLoginFunc: func(ctx context.Context, loginDTO *dto.AccountLogin) (*dto.AccountLoginResult, int, error) {
//				panic("mock out the AccountLogin method")
//			},
//			AccountLogoutFunc: func(ctx context.Context, accountID string, sessionID string) (int, error) {
//				panic("mock out the AccountLogout method")
//			},
//			AccountRefreshAccessTokenFunc: func(ctx context.Context, accountID string, accountSessionID string) (*dto.AccountRefreshAccessTokenResult, int, error) {
//				panic("mock out the AccountRefreshAccessToken method")
//			},
//			AccountResetPasswordFunc: func(ctx context.Context, resetPasswordDTO *dto.AccountResetPassword) (int, error) {
//				panic("mock out the AccountResetPassword method")
//			},
//			AccountSetProfileFunc: func(ctx context.Context, accountID string, accountProfileDTO *dto.AccountProfile) (*entity.Account, int, error) {
//				panic("mock out the AccountSetProfile method")
//			},
//			AppActivateFunc: func(ctx context.Context, accountID string, params *dto.AppActivate) (int, error) {
//				panic("mock out the AppActivate method")
//			},
//			AppDeleteFunc: func(ctx context.Context, accountID string, params *dto.AppDelete) (int, error) {
//				panic("mock out the AppDelete method")
//			},
//			AppExecQueryFunc: func(ctx context.Context, accountID string, params *dto.AppExecQuery) (*dto.AppExecQueryResult, int, error) {
//				panic("mock out the AppExecQuery method")
//			},
//			AppFromTokenFunc: func(ctx context.Context, params *dto.AppFromTokenParams) (*dto.AppFromToken, int, error) {
//				panic("mock out the AppFromToken method")
//			},
//			AppGetFunc: func(ctx context.Context, accountID string, params *dto.AppGetParams) (*entity.App, int, error) {
//				panic("mock out the AppGet method")
//			},
//			AppInstallFunc: func(ctx context.Context, accountID string, params *dto.AppInstall) (*entity.App, int, error) {
//				panic("mock out the AppInstall method")
//			},
//			AppListFunc: func(ctx context.Context, accountID string, params *dto.AppListParams) (*dto.AppListResult, int, error) {
//				panic("mock out the AppList method")
//			},
//			AppMutateStateFunc: func(ctx context.Context, accountID string, params *dto.AppMutateState) (int, error) {
//				panic("mock out the AppMutateState method")
//			},
//			AppStopFunc: func(ctx context.Context, accountID string, params *dto.AppDelete) (*entity.App, int, error) {
//				panic("mock out the AppStop method")
//			},
//			ChannelCreateFunc: func(ctx context.Context, accountID string, channelDTO *dto.Channel) (*entity.Workspace, int, error) {
//				panic("mock out the ChannelCreate method")
//			},
//			ChannelDeleteFunc: func(ctx context.Context, accountID string, deleteChannelDTO *dto.DeleteChannel) (*entity.Workspace, int, error) {
//				panic("mock out the ChannelDelete method")
//			},
//			ChannelGroupDeleteFunc: func(ctx context.Context, accountID string, deleteChannelGroupDTO *dto.DeleteChannelGroup) (*entity.Workspace, int, error) {
//				panic("mock out the ChannelGroupDelete method")
//			},
//			ChannelGroupUpsertFunc: func(ctx context.Context, accountID string, channelGroupDTO *dto.ChannelGroup) (*entity.Workspace, int, error) {
//				panic("mock out the ChannelGroupUpsert method")
//			},
//			ChannelUpdateFunc: func(ctx context.Context, accountID string, channelDTO *dto.Channel) (*entity.Workspace, int, error) {
//				panic("mock out the ChannelUpdate method")
//			},
//			CubeJSSchemasFunc: func(ctx context.Context, accountID string, workspaceID string) (dto.CubeJSSchemas, int, error) {
//				panic("mock out the CubeJSSchemas method")
//			},
//			DBSelectFunc: func(ctx context.Context, accountID string, params *dto.DBSelectParams) ([]map[string]interface{}, int, error) {
//				panic("mock out the DBSelect method")
//			},
//			DataHookUpdateFunc: func(ctx context.Context, accountID string, dataHookDTO *dto.DataHook) (*entity.Workspace, int, error) {
//				panic("mock out the DataHookUpdate method")
//			},
//			DataLogImportFromQueueFunc: func(ctx context.Context, dataLogInQueue *common.DataLogInQueue) *common.DataLogInQueueResult {
//				panic("mock out the DataLogImportFromQueue method")
//			},
//			DataLogListFunc: func(ctx context.Context, accountID string, params *dto.DataLogListParams) (*dto.DataLogListResult, int, error) {
//				panic("mock out the DataLogList method")
//			},
//			DataLogReprocessOneFunc: func(ctx context.Context, accountID string, params *dto.DataLogReprocessOne) (*common.DataLogInQueueResult, int, error) {
//				panic("mock out the DataLogReprocessOne method")
//			},
//			DataLogReprocessUntilFunc: func(ctx context.Context, untilDate time.Time) (int, error) {
//				panic("mock out the DataLogReprocessUntil method")
//			},
//			DevAddDataImportToQueueFunc: func(dataLogInQueue *common.DataLogInQueue)  {
//				panic("mock out the DevAddDataImportToQueue method")
//			},
//			DevExecDataImportFromQueueFunc: func(ctx context.Context, concurrency int) (int, error) {
//				panic("mock out the DevExecDataImportFromQueue method")
//			},
//			DevExecTaskWithWorkersFunc: func(ctx context.Context, workspaceID string) (int, error) {
//				panic("mock out the DevExecTaskWithWorkers method")
//			},
//			DevResetDBFunc: func(ctx context.Context) error {
//				panic("mock out the DevResetDB method")
//			},
//			DoDBSelectFunc: func(workspaceID string, query string, args []interface{}) ([]byte, error) {
//				panic("mock out the DoDBSelect method")
//			},
//			DomainDeleteFunc: func(ctx context.Context, accountID string, domainDeleteDTO *dto.DomainDelete) (*entity.Workspace, int, error) {
//				panic("mock out the DomainDelete method")
//			},
//			DomainUpsertFunc: func(ctx context.Context, accountID string, domainDTO *dto.Domain) (*entity.Workspace, int, error) {
//				panic("mock out the DomainUpsert method")
//			},
//			ExecuteMigrationFunc: func(ctx context.Context, installedVersion float64, codeVersion float64) error {
//				panic("mock out the ExecuteMigration method")
//			},
//			FolderFilesFunc: func(ctx context.Context, accountID string, params *dto.FolderFilesParams) (*dto.FolderFilesResult, int, error) {
//				panic("mock out the FolderFiles method")
//			},
//			GetConfigFunc: func() *entity.Config {
//				panic("mock out the GetConfig method")
//			},
//			GetWorkspaceForAccountFunc: func(ctx context.Context, workspaceID string, accountID string) (*entity.Workspace, int, error) {
//				panic("mock out the GetWorkspaceForAccount method")
//			},
//			InstallOrVerifyServerFunc: func(ctx context.Context) (bool, error) {
//				panic("mock out the InstallOrVerifyServer method")
//			},
//			IsAccountOfOrganizationFunc: func(ctx context.Context, accountId string, organizationId string) (bool, int, error) {
//				panic("mock out the IsAccountOfOrganization method")
//			},
//			IsOwnerOfOrganizationFunc: func(ctx context.Context, accountId string, organizationId string) (bool, int, error) {
//				panic("mock out the IsOwnerOfOrganization method")
//			},
//			OrganizationAccountCreateServiceAccountFunc: func(ctx context.Context, accountID string, createServiceAccount *dto.OrganizationAccountCreateServiceAccount) (int, error) {
//				panic("mock out the OrganizationAccountCreateServiceAccount method")
//			},
//			OrganizationAccountDeactivateFunc: func(ctx context.Context, accountID string, deactivateAccountDTO *dto.OrganizationAccountDeactivate) (int, error) {
//				panic("mock out the OrganizationAccountDeactivate method")
//			},
//			OrganizationAccountListFunc: func(ctx context.Context, accountID string, organizationID string) (*dto.OrganizationAccountListResult, int, error) {
//				panic("mock out the OrganizationAccountList method")
//			},
//			OrganizationAccountTransferOwnershipFunc: func(ctx context.Context, accountID string, transferOwnershipDTO *dto.OrganizationAccountTransferOwnership) (int, error) {
//				panic("mock out the OrganizationAccountTransferOwnership method")
//			},
//			OrganizationCreateFunc: func(ctx context.Context, orgCreateDTO *dto.OrganizationCreate) (*dto.OrganizationResult, int, error) {
//				panic("mock out the OrganizationCreate method")
//			},
//			OrganizationInvitationCancelFunc: func(ctx context.Context, accountID string, cancelInvitation *dto.OrganizationInvitationCancel) (int, error) {
//				panic("mock out the OrganizationInvitationCancel method")
//			},
//			OrganizationInvitationConsumeFunc: func(ctx context.Context, consumeInvitationDTO *dto.OrganizationInvitationConsume) (*dto.AccountLoginResult, int, error) {
//				panic("mock out the OrganizationInvitationConsume method")
//			},
//			OrganizationInvitationCreateFunc: func(ctx context.Context, accountInvitationDTO *dto.OrganizationInvitation) (int, error) {
//				panic("mock out the OrganizationInvitationCreate method")
//			},
//			OrganizationInvitationListFunc: func(ctx context.Context, accountID string, organizationID string) (*dto.OrganizationInvitationListResult, int, error) {
//				panic("mock out the OrganizationInvitationList method")
//			},
//			OrganizationInvitationReadFunc: func(ctx context.Context, token string) (*dto.OrganizationInvitationReadResult, int, error) {
//				panic("mock out the OrganizationInvitationRead method")
//			},
//			OrganizationListFunc: func(ctx context.Context, accountID string) (*dto.OrganizationListResult, int, error) {
//				panic("mock out the OrganizationList method")
//			},
//			OrganizationSetProfileFunc: func(ctx context.Context, accountID string, orgProfileDTO *dto.OrganizationProfile) (*dto.OrganizationResult, int, error) {
//				panic("mock out the OrganizationSetProfile method")
//			},
//			SegmentCreateFunc: func(ctx context.Context, accountID string, segmentDTO *dto.Segment) (int, error) {
//				panic("mock out the SegmentCreate method")
//			},
//			SegmentDeleteFunc: func(ctx context.Context, accountID string, deleteSegmentDTO *dto.DeleteSegment) (int, error) {
//				panic("mock out the SegmentDelete method")
//			},
//			SegmentListFunc: func(ctx context.Context, accountID string, params *dto.SegmentListParams) (*dto.SegmentListResult, int, error) {
//				panic("mock out the SegmentList method")
//			},
//			SegmentPreviewFunc: func(ctx context.Context, accountID string, params *dto.SegmentPreviewParams) (*dto.SegmentPreviewResult, int, error) {
//				panic("mock out the SegmentPreview method")
//			},
//			SegmentUpdateFunc: func(ctx context.Context, accountID string, segmentDTO *dto.Segment) (int, error) {
//				panic("mock out the SegmentUpdate method")
//			},
//			SendSystemEmailFunc: func(ctx context.Context, systemEmail *dto.SystemEmail) error {
//				panic("mock out the SendSystemEmail method")
//			},
//			TaskExecAbortFunc: func(ctx context.Context, accountID string, params *dto.TaskExecAbortParams) (int, error) {
//				panic("mock out the TaskExecAbort method")
//			},
//			TaskExecCreateFunc: func(ctx context.Context, accountID string, params *dto.TaskExecCreateParams) (int, error) {
//				panic("mock out the TaskExecCreate method")
//			},
//			TaskExecDoFunc: func(ctx context.Context, workspaceID string, payload *dto.TaskExecRequestPayload) *common.DataLogInQueueResult {
//				panic("mock out the TaskExecDo method")
//			},
//			TaskExecJobInfoFunc: func(ctx context.Context, accountID string, params *dto.TaskExecJobInfoParams) (*dto.TaskExecJobInfoInfo, int, error) {
//				panic("mock out the TaskExecJobInfo method")
//			},
//			TaskExecJobsFunc: func(ctx context.Context, accountID string, params *dto.TaskExecJobsParams) (*dto.TaskExecJobsResult, int, error) {
//				panic("mock out the TaskExecJobs method")
//			},
//			TaskExecListFunc: func(ctx context.Context, accountID string, params *dto.TaskExecListParams) (*dto.TaskExecListResult, int, error) {
//				panic("mock out the TaskExecList method")
//			},
//			TaskListFunc: func(ctx context.Context, accountID string, params *dto.TaskListParams) (*dto.TaskListResult, int, error) {
//				panic("mock out the TaskList method")
//			},
//			TaskRunFunc: func(ctx context.Context, accountID string, params *dto.TaskRunParams) (int, error) {
//				panic("mock out the TaskRun method")
//			},
//			TaskWakeUpCronFunc: func(ctx context.Context) (int, error) {
//				panic("mock out the TaskWakeUpCron method")
//			},
//			UserListFunc: func(ctx context.Context, accountID string, params *dto.UserListParams) (*dto.UserListResult, int, error) {
//				panic("mock out the UserList method")
//			},
//			UserShowFunc: func(ctx context.Context, workspaceID string, accountID string, userExternalID string) (*dto.UserShowResult, int, error) {
//				panic("mock out the UserShow method")
//			},
//			WorkspaceCreateFunc: func(ctx context.Context, accountID string, workspaceDTO *dto.WorkspaceCreate) (*entity.Workspace, int, error) {
//				panic("mock out the WorkspaceCreate method")
//			},
//			WorkspaceCreateOrResetDemoFunc: func(ctx context.Context, accountID string, workspaceDemoDTO *dto.WorkspaceCreateOrResetDemo) (*entity.Workspace, int, error) {
//				panic("mock out the WorkspaceCreateOrResetDemo method")
//			},
//			WorkspaceGetSecretKeyFunc: func(ctx context.Context, accountID string, workspaceID string) (*dto.WorkspaceSecretKeyResult, int, error) {
//				panic("mock out the WorkspaceGetSecretKey method")
//			},
//			WorkspaceListFunc: func(ctx context.Context, accountID string, organizationID string) (*dto.WorkspaceListResult, int, error) {
//				panic("mock out the WorkspaceList method")
//			},
//			WorkspaceShowFunc: func(ctx context.Context, accountID string, workspaceID string) (*dto.WorkspaceShowResult, int, error) {
//				panic("mock out the WorkspaceShow method")
//			},
//			WorkspaceShowTablesFunc: func(ctx context.Context, accountID string, workspaceID string) (*dto.WorkspaceShowTablesResult, int, error) {
//				panic("mock out the WorkspaceShowTables method")
//			},
//			WorkspaceUpdateFunc: func(ctx context.Context, accountID string, payload *dto.WorkspaceUpdate) (*entity.Workspace, int, error) {
//				panic("mock out the WorkspaceUpdate method")
//			},
//		}
//
//		// use mockedService in code that requires Service
//		// and then make assertions.
//
//	}
type ServiceMock struct {
	// AccountConsumeResetPasswordFunc mocks the AccountConsumeResetPassword method.
	AccountConsumeResetPasswordFunc func(ctx context.Context, resetPasswordDTO *dto.AccountConsumeResetPassword) (*dto.AccountLoginResult, int, error)

	// AccountLoginFunc mocks the AccountLogin method.
	AccountLoginFunc func(ctx context.Context, loginDTO *dto.AccountLogin) (*dto.AccountLoginResult, int, error)

	// AccountLogoutFunc mocks the AccountLogout method.
	AccountLogoutFunc func(ctx context.Context, accountID string, sessionID string) (int, error)

	// AccountRefreshAccessTokenFunc mocks the AccountRefreshAccessToken method.
	AccountRefreshAccessTokenFunc func(ctx context.Context, accountID string, accountSessionID string) (*dto.AccountRefreshAccessTokenResult, int, error)

	// AccountResetPasswordFunc mocks the AccountResetPassword method.
	AccountResetPasswordFunc func(ctx context.Context, resetPasswordDTO *dto.AccountResetPassword) (int, error)

	// AccountSetProfileFunc mocks the AccountSetProfile method.
	AccountSetProfileFunc func(ctx context.Context, accountID string, accountProfileDTO *dto.AccountProfile) (*entity.Account, int, error)

	// AppActivateFunc mocks the AppActivate method.
	AppActivateFunc func(ctx context.Context, accountID string, params *dto.AppActivate) (int, error)

	// AppDeleteFunc mocks the AppDelete method.
	AppDeleteFunc func(ctx context.Context, accountID string, params *dto.AppDelete) (int, error)

	// AppExecQueryFunc mocks the AppExecQuery method.
	AppExecQueryFunc func(ctx context.Context, accountID string, params *dto.AppExecQuery) (*dto.AppExecQueryResult, int, error)

	// AppFromTokenFunc mocks the AppFromToken method.
	AppFromTokenFunc func(ctx context.Context, params *dto.AppFromTokenParams) (*dto.AppFromToken, int, error)

	// AppGetFunc mocks the AppGet method.
	AppGetFunc func(ctx context.Context, accountID string, params *dto.AppGetParams) (*entity.App, int, error)

	// AppInstallFunc mocks the AppInstall method.
	AppInstallFunc func(ctx context.Context, accountID string, params *dto.AppInstall) (*entity.App, int, error)

	// AppListFunc mocks the AppList method.
	AppListFunc func(ctx context.Context, accountID string, params *dto.AppListParams) (*dto.AppListResult, int, error)

	// AppMutateStateFunc mocks the AppMutateState method.
	AppMutateStateFunc func(ctx context.Context, accountID string, params *dto.AppMutateState) (int, error)

	// AppStopFunc mocks the AppStop method.
	AppStopFunc func(ctx context.Context, accountID string, params *dto.AppDelete) (*entity.App, int, error)

	// ChannelCreateFunc mocks the ChannelCreate method.
	ChannelCreateFunc func(ctx context.Context, accountID string, channelDTO *dto.Channel) (*entity.Workspace, int, error)

	// ChannelDeleteFunc mocks the ChannelDelete method.
	ChannelDeleteFunc func(ctx context.Context, accountID string, deleteChannelDTO *dto.DeleteChannel) (*entity.Workspace, int, error)

	// ChannelGroupDeleteFunc mocks the ChannelGroupDelete method.
	ChannelGroupDeleteFunc func(ctx context.Context, accountID string, deleteChannelGroupDTO *dto.DeleteChannelGroup) (*entity.Workspace, int, error)

	// ChannelGroupUpsertFunc mocks the ChannelGroupUpsert method.
	ChannelGroupUpsertFunc func(ctx context.Context, accountID string, channelGroupDTO *dto.ChannelGroup) (*entity.Workspace, int, error)

	// ChannelUpdateFunc mocks the ChannelUpdate method.
	ChannelUpdateFunc func(ctx context.Context, accountID string, channelDTO *dto.Channel) (*entity.Workspace, int, error)

	// CubeJSSchemasFunc mocks the CubeJSSchemas method.
	CubeJSSchemasFunc func(ctx context.Context, accountID string, workspaceID string) (dto.CubeJSSchemas, int, error)

	// DBSelectFunc mocks the DBSelect method.
	DBSelectFunc func(ctx context.Context, accountID string, params *dto.DBSelectParams) ([]map[string]interface{}, int, error)

	// DataHookUpdateFunc mocks the DataHookUpdate method.
	DataHookUpdateFunc func(ctx context.Context, accountID string, dataHookDTO *dto.DataHook) (*entity.Workspace, int, error)

	// DataLogImportFromQueueFunc mocks the DataLogImportFromQueue method.
	DataLogImportFromQueueFunc func(ctx context.Context, dataLogInQueue *common.DataLogInQueue) *common.DataLogInQueueResult

	// DataLogListFunc mocks the DataLogList method.
	DataLogListFunc func(ctx context.Context, accountID string, params *dto.DataLogListParams) (*dto.DataLogListResult, int, error)

	// DataLogReprocessOneFunc mocks the DataLogReprocessOne method.
	DataLogReprocessOneFunc func(ctx context.Context, accountID string, params *dto.DataLogReprocessOne) (*common.DataLogInQueueResult, int, error)

	// DataLogReprocessUntilFunc mocks the DataLogReprocessUntil method.
	DataLogReprocessUntilFunc func(ctx context.Context, untilDate time.Time) (int, error)

	// DevAddDataImportToQueueFunc mocks the DevAddDataImportToQueue method.
	DevAddDataImportToQueueFunc func(dataLogInQueue *common.DataLogInQueue)

	// DevExecDataImportFromQueueFunc mocks the DevExecDataImportFromQueue method.
	DevExecDataImportFromQueueFunc func(ctx context.Context, concurrency int) (int, error)

	// DevExecTaskWithWorkersFunc mocks the DevExecTaskWithWorkers method.
	DevExecTaskWithWorkersFunc func(ctx context.Context, workspaceID string) (int, error)

	// DevResetDBFunc mocks the DevResetDB method.
	DevResetDBFunc func(ctx context.Context) error

	// DoDBSelectFunc mocks the DoDBSelect method.
	DoDBSelectFunc func(workspaceID string, query string, args []interface{}) ([]byte, error)

	// DomainDeleteFunc mocks the DomainDelete method.
	DomainDeleteFunc func(ctx context.Context, accountID string, domainDeleteDTO *dto.DomainDelete) (*entity.Workspace, int, error)

	// DomainUpsertFunc mocks the DomainUpsert method.
	DomainUpsertFunc func(ctx context.Context, accountID string, domainDTO *dto.Domain) (*entity.Workspace, int, error)

	// ExecuteMigrationFunc mocks the ExecuteMigration method.
	ExecuteMigrationFunc func(ctx context.Context, installedVersion float64, codeVersion float64) error

	// FolderFilesFunc mocks the FolderFiles method.
	FolderFilesFunc func(ctx context.Context, accountID string, params *dto.FolderFilesParams) (*dto.FolderFilesResult, int, error)

	// GetConfigFunc mocks the GetConfig method.
	GetConfigFunc func() *entity.Config

	// GetWorkspaceForAccountFunc mocks the GetWorkspaceForAccount method.
	GetWorkspaceForAccountFunc func(ctx context.Context, workspaceID string, accountID string) (*entity.Workspace, int, error)

	// InstallOrVerifyServerFunc mocks the InstallOrVerifyServer method.
	InstallOrVerifyServerFunc func(ctx context.Context) (bool, error)

	// IsAccountOfOrganizationFunc mocks the IsAccountOfOrganization method.
	IsAccountOfOrganizationFunc func(ctx context.Context, accountId string, organizationId string) (bool, int, error)

	// IsOwnerOfOrganizationFunc mocks the IsOwnerOfOrganization method.
	IsOwnerOfOrganizationFunc func(ctx context.Context, accountId string, organizationId string) (bool, int, error)

	// OrganizationAccountCreateServiceAccountFunc mocks the OrganizationAccountCreateServiceAccount method.
	OrganizationAccountCreateServiceAccountFunc func(ctx context.Context, accountID string, createServiceAccount *dto.OrganizationAccountCreateServiceAccount) (int, error)

	// OrganizationAccountDeactivateFunc mocks the OrganizationAccountDeactivate method.
	OrganizationAccountDeactivateFunc func(ctx context.Context, accountID string, deactivateAccountDTO *dto.OrganizationAccountDeactivate) (int, error)

	// OrganizationAccountListFunc mocks the OrganizationAccountList method.
	OrganizationAccountListFunc func(ctx context.Context, accountID string, organizationID string) (*dto.OrganizationAccountListResult, int, error)

	// OrganizationAccountTransferOwnershipFunc mocks the OrganizationAccountTransferOwnership method.
	OrganizationAccountTransferOwnershipFunc func(ctx context.Context, accountID string, transferOwnershipDTO *dto.OrganizationAccountTransferOwnership) (int, error)

	// OrganizationCreateFunc mocks the OrganizationCreate method.
	OrganizationCreateFunc func(ctx context.Context, orgCreateDTO *dto.OrganizationCreate) (*dto.OrganizationResult, int, error)

	// OrganizationInvitationCancelFunc mocks the OrganizationInvitationCancel method.
	OrganizationInvitationCancelFunc func(ctx context.Context, accountID string, cancelInvitation *dto.OrganizationInvitationCancel) (int, error)

	// OrganizationInvitationConsumeFunc mocks the OrganizationInvitationConsume method.
	OrganizationInvitationConsumeFunc func(ctx context.Context, consumeInvitationDTO *dto.OrganizationInvitationConsume) (*dto.AccountLoginResult, int, error)

	// OrganizationInvitationCreateFunc mocks the OrganizationInvitationCreate method.
	OrganizationInvitationCreateFunc func(ctx context.Context, accountInvitationDTO *dto.OrganizationInvitation) (int, error)

	// OrganizationInvitationListFunc mocks the OrganizationInvitationList method.
	OrganizationInvitationListFunc func(ctx context.Context, accountID string, organizationID string) (*dto.OrganizationInvitationListResult, int, error)

	// OrganizationInvitationReadFunc mocks the OrganizationInvitationRead method.
	OrganizationInvitationReadFunc func(ctx context.Context, token string) (*dto.OrganizationInvitationReadResult, int, error)

	// OrganizationListFunc mocks the OrganizationList method.
	OrganizationListFunc func(ctx context.Context, accountID string) (*dto.OrganizationListResult, int, error)

	// OrganizationSetProfileFunc mocks the OrganizationSetProfile method.
	OrganizationSetProfileFunc func(ctx context.Context, accountID string, orgProfileDTO *dto.OrganizationProfile) (*dto.OrganizationResult, int, error)

	// SegmentCreateFunc mocks the SegmentCreate method.
	SegmentCreateFunc func(ctx context.Context, accountID string, segmentDTO *dto.Segment) (int, error)

	// SegmentDeleteFunc mocks the SegmentDelete method.
	SegmentDeleteFunc func(ctx context.Context, accountID string, deleteSegmentDTO *dto.DeleteSegment) (int, error)

	// SegmentListFunc mocks the SegmentList method.
	SegmentListFunc func(ctx context.Context, accountID string, params *dto.SegmentListParams) (*dto.SegmentListResult, int, error)

	// SegmentPreviewFunc mocks the SegmentPreview method.
	SegmentPreviewFunc func(ctx context.Context, accountID string, params *dto.SegmentPreviewParams) (*dto.SegmentPreviewResult, int, error)

	// SegmentUpdateFunc mocks the SegmentUpdate method.
	SegmentUpdateFunc func(ctx context.Context, accountID string, segmentDTO *dto.Segment) (int, error)

	// SendSystemEmailFunc mocks the SendSystemEmail method.
	SendSystemEmailFunc func(ctx context.Context, systemEmail *dto.SystemEmail) error

	// TaskExecAbortFunc mocks the TaskExecAbort method.
	TaskExecAbortFunc func(ctx context.Context, accountID string, params *dto.TaskExecAbortParams) (int, error)

	// TaskExecCreateFunc mocks the TaskExecCreate method.
	TaskExecCreateFunc func(ctx context.Context, accountID string, params *dto.TaskExecCreateParams) (int, error)

	// TaskExecDoFunc mocks the TaskExecDo method.
	TaskExecDoFunc func(ctx context.Context, workspaceID string, payload *dto.TaskExecRequestPayload) *common.DataLogInQueueResult

	// TaskExecJobInfoFunc mocks the TaskExecJobInfo method.
	TaskExecJobInfoFunc func(ctx context.Context, accountID string, params *dto.TaskExecJobInfoParams) (*dto.TaskExecJobInfoInfo, int, error)

	// TaskExecJobsFunc mocks the TaskExecJobs method.
	TaskExecJobsFunc func(ctx context.Context, accountID string, params *dto.TaskExecJobsParams) (*dto.TaskExecJobsResult, int, error)

	// TaskExecListFunc mocks the TaskExecList method.
	TaskExecListFunc func(ctx context.Context, accountID string, params *dto.TaskExecListParams) (*dto.TaskExecListResult, int, error)

	// TaskListFunc mocks the TaskList method.
	TaskListFunc func(ctx context.Context, accountID string, params *dto.TaskListParams) (*dto.TaskListResult, int, error)

	// TaskRunFunc mocks the TaskRun method.
	TaskRunFunc func(ctx context.Context, accountID string, params *dto.TaskRunParams) (int, error)

	// TaskWakeUpCronFunc mocks the TaskWakeUpCron method.
	TaskWakeUpCronFunc func(ctx context.Context) (int, error)

	// UserListFunc mocks the UserList method.
	UserListFunc func(ctx context.Context, accountID string, params *dto.UserListParams) (*dto.UserListResult, int, error)

	// UserShowFunc mocks the UserShow method.
	UserShowFunc func(ctx context.Context, workspaceID string, accountID string, userExternalID string) (*dto.UserShowResult, int, error)

	// WorkspaceCreateFunc mocks the WorkspaceCreate method.
	WorkspaceCreateFunc func(ctx context.Context, accountID string, workspaceDTO *dto.WorkspaceCreate) (*entity.Workspace, int, error)

	// WorkspaceCreateOrResetDemoFunc mocks the WorkspaceCreateOrResetDemo method.
	WorkspaceCreateOrResetDemoFunc func(ctx context.Context, accountID string, workspaceDemoDTO *dto.WorkspaceCreateOrResetDemo) (*entity.Workspace, int, error)

	// WorkspaceGetSecretKeyFunc mocks the WorkspaceGetSecretKey method.
	WorkspaceGetSecretKeyFunc func(ctx context.Context, accountID string, workspaceID string) (*dto.WorkspaceSecretKeyResult, int, error)

	// WorkspaceListFunc mocks the WorkspaceList method.
	WorkspaceListFunc func(ctx context.Context, accountID string, organizationID string) (*dto.WorkspaceListResult, int, error)

	// WorkspaceShowFunc mocks the WorkspaceShow method.
	WorkspaceShowFunc func(ctx context.Context, accountID string, workspaceID string) (*dto.WorkspaceShowResult, int, error)

	// WorkspaceShowTablesFunc mocks the WorkspaceShowTables method.
	WorkspaceShowTablesFunc func(ctx context.Context, accountID string, workspaceID string) (*dto.WorkspaceShowTablesResult, int, error)

	// WorkspaceUpdateFunc mocks the WorkspaceUpdate method.
	WorkspaceUpdateFunc func(ctx context.Context, accountID string, payload *dto.WorkspaceUpdate) (*entity.Workspace, int, error)

	// calls tracks calls to the methods.
	calls struct {
		// AccountConsumeResetPassword holds details about calls to the AccountConsumeResetPassword method.
		AccountConsumeResetPassword []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ResetPasswordDTO is the resetPasswordDTO argument value.
			ResetPasswordDTO *dto.AccountConsumeResetPassword
		}
		// AccountLogin holds details about calls to the AccountLogin method.
		AccountLogin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// LoginDTO is the loginDTO argument value.
			LoginDTO *dto.AccountLogin
		}
		// AccountLogout holds details about calls to the AccountLogout method.
		AccountLogout []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// SessionID is the sessionID argument value.
			SessionID string
		}
		// AccountRefreshAccessToken holds details about calls to the AccountRefreshAccessToken method.
		AccountRefreshAccessToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// AccountSessionID is the accountSessionID argument value.
			AccountSessionID string
		}
		// AccountResetPassword holds details about calls to the AccountResetPassword method.
		AccountResetPassword []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ResetPasswordDTO is the resetPasswordDTO argument value.
			ResetPasswordDTO *dto.AccountResetPassword
		}
		// AccountSetProfile holds details about calls to the AccountSetProfile method.
		AccountSetProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// AccountProfileDTO is the accountProfileDTO argument value.
			AccountProfileDTO *dto.AccountProfile
		}
		// AppActivate holds details about calls to the AppActivate method.
		AppActivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.AppActivate
		}
		// AppDelete holds details about calls to the AppDelete method.
		AppDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.AppDelete
		}
		// AppExecQuery holds details about calls to the AppExecQuery method.
		AppExecQuery []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.AppExecQuery
		}
		// AppFromToken holds details about calls to the AppFromToken method.
		AppFromToken []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *dto.AppFromTokenParams
		}
		// AppGet holds details about calls to the AppGet method.
		AppGet []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.AppGetParams
		}
		// AppInstall holds details about calls to the AppInstall method.
		AppInstall []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.AppInstall
		}
		// AppList holds details about calls to the AppList method.
		AppList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.AppListParams
		}
		// AppMutateState holds details about calls to the AppMutateState method.
		AppMutateState []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.AppMutateState
		}
		// AppStop holds details about calls to the AppStop method.
		AppStop []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.AppDelete
		}
		// ChannelCreate holds details about calls to the ChannelCreate method.
		ChannelCreate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// ChannelDTO is the channelDTO argument value.
			ChannelDTO *dto.Channel
		}
		// ChannelDelete holds details about calls to the ChannelDelete method.
		ChannelDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// DeleteChannelDTO is the deleteChannelDTO argument value.
			DeleteChannelDTO *dto.DeleteChannel
		}
		// ChannelGroupDelete holds details about calls to the ChannelGroupDelete method.
		ChannelGroupDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// DeleteChannelGroupDTO is the deleteChannelGroupDTO argument value.
			DeleteChannelGroupDTO *dto.DeleteChannelGroup
		}
		// ChannelGroupUpsert holds details about calls to the ChannelGroupUpsert method.
		ChannelGroupUpsert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// ChannelGroupDTO is the channelGroupDTO argument value.
			ChannelGroupDTO *dto.ChannelGroup
		}
		// ChannelUpdate holds details about calls to the ChannelUpdate method.
		ChannelUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// ChannelDTO is the channelDTO argument value.
			ChannelDTO *dto.Channel
		}
		// CubeJSSchemas holds details about calls to the CubeJSSchemas method.
		CubeJSSchemas []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID string
		}
		// DBSelect holds details about calls to the DBSelect method.
		DBSelect []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.DBSelectParams
		}
		// DataHookUpdate holds details about calls to the DataHookUpdate method.
		DataHookUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// DataHookDTO is the dataHookDTO argument value.
			DataHookDTO *dto.DataHook
		}
		// DataLogImportFromQueue holds details about calls to the DataLogImportFromQueue method.
		DataLogImportFromQueue []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// DataLogInQueue is the dataLogInQueue argument value.
			DataLogInQueue *common.DataLogInQueue
		}
		// DataLogList holds details about calls to the DataLogList method.
		DataLogList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.DataLogListParams
		}
		// DataLogReprocessOne holds details about calls to the DataLogReprocessOne method.
		DataLogReprocessOne []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.DataLogReprocessOne
		}
		// DataLogReprocessUntil holds details about calls to the DataLogReprocessUntil method.
		DataLogReprocessUntil []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UntilDate is the untilDate argument value.
			UntilDate time.Time
		}
		// DevAddDataImportToQueue holds details about calls to the DevAddDataImportToQueue method.
		DevAddDataImportToQueue []struct {
			// DataLogInQueue is the dataLogInQueue argument value.
			DataLogInQueue *common.DataLogInQueue
		}
		// DevExecDataImportFromQueue holds details about calls to the DevExecDataImportFromQueue method.
		DevExecDataImportFromQueue []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Concurrency is the concurrency argument value.
			Concurrency int
		}
		// DevExecTaskWithWorkers holds details about calls to the DevExecTaskWithWorkers method.
		DevExecTaskWithWorkers []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID string
		}
		// DevResetDB holds details about calls to the DevResetDB method.
		DevResetDB []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// DoDBSelect holds details about calls to the DoDBSelect method.
		DoDBSelect []struct {
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID string
			// Query is the query argument value.
			Query string
			// Args is the args argument value.
			Args []interface{}
		}
		// DomainDelete holds details about calls to the DomainDelete method.
		DomainDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// DomainDeleteDTO is the domainDeleteDTO argument value.
			DomainDeleteDTO *dto.DomainDelete
		}
		// DomainUpsert holds details about calls to the DomainUpsert method.
		DomainUpsert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// DomainDTO is the domainDTO argument value.
			DomainDTO *dto.Domain
		}
		// ExecuteMigration holds details about calls to the ExecuteMigration method.
		ExecuteMigration []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// InstalledVersion is the installedVersion argument value.
			InstalledVersion float64
			// CodeVersion is the codeVersion argument value.
			CodeVersion float64
		}
		// FolderFiles holds details about calls to the FolderFiles method.
		FolderFiles []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.FolderFilesParams
		}
		// GetConfig holds details about calls to the GetConfig method.
		GetConfig []struct {
		}
		// GetWorkspaceForAccount holds details about calls to the GetWorkspaceForAccount method.
		GetWorkspaceForAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID string
			// AccountID is the accountID argument value.
			AccountID string
		}
		// InstallOrVerifyServer holds details about calls to the InstallOrVerifyServer method.
		InstallOrVerifyServer []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// IsAccountOfOrganization holds details about calls to the IsAccountOfOrganization method.
		IsAccountOfOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountId is the accountId argument value.
			AccountId string
			// OrganizationId is the organizationId argument value.
			OrganizationId string
		}
		// IsOwnerOfOrganization holds details about calls to the IsOwnerOfOrganization method.
		IsOwnerOfOrganization []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountId is the accountId argument value.
			AccountId string
			// OrganizationId is the organizationId argument value.
			OrganizationId string
		}
		// OrganizationAccountCreateServiceAccount holds details about calls to the OrganizationAccountCreateServiceAccount method.
		OrganizationAccountCreateServiceAccount []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// CreateServiceAccount is the createServiceAccount argument value.
			CreateServiceAccount *dto.OrganizationAccountCreateServiceAccount
		}
		// OrganizationAccountDeactivate holds details about calls to the OrganizationAccountDeactivate method.
		OrganizationAccountDeactivate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// DeactivateAccountDTO is the deactivateAccountDTO argument value.
			DeactivateAccountDTO *dto.OrganizationAccountDeactivate
		}
		// OrganizationAccountList holds details about calls to the OrganizationAccountList method.
		OrganizationAccountList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// OrganizationID is the organizationID argument value.
			OrganizationID string
		}
		// OrganizationAccountTransferOwnership holds details about calls to the OrganizationAccountTransferOwnership method.
		OrganizationAccountTransferOwnership []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// TransferOwnershipDTO is the transferOwnershipDTO argument value.
			TransferOwnershipDTO *dto.OrganizationAccountTransferOwnership
		}
		// OrganizationCreate holds details about calls to the OrganizationCreate method.
		OrganizationCreate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// OrgCreateDTO is the orgCreateDTO argument value.
			OrgCreateDTO *dto.OrganizationCreate
		}
		// OrganizationInvitationCancel holds details about calls to the OrganizationInvitationCancel method.
		OrganizationInvitationCancel []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// CancelInvitation is the cancelInvitation argument value.
			CancelInvitation *dto.OrganizationInvitationCancel
		}
		// OrganizationInvitationConsume holds details about calls to the OrganizationInvitationConsume method.
		OrganizationInvitationConsume []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// ConsumeInvitationDTO is the consumeInvitationDTO argument value.
			ConsumeInvitationDTO *dto.OrganizationInvitationConsume
		}
		// OrganizationInvitationCreate holds details about calls to the OrganizationInvitationCreate method.
		OrganizationInvitationCreate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountInvitationDTO is the accountInvitationDTO argument value.
			AccountInvitationDTO *dto.OrganizationInvitation
		}
		// OrganizationInvitationList holds details about calls to the OrganizationInvitationList method.
		OrganizationInvitationList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// OrganizationID is the organizationID argument value.
			OrganizationID string
		}
		// OrganizationInvitationRead holds details about calls to the OrganizationInvitationRead method.
		OrganizationInvitationRead []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Token is the token argument value.
			Token string
		}
		// OrganizationList holds details about calls to the OrganizationList method.
		OrganizationList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
		}
		// OrganizationSetProfile holds details about calls to the OrganizationSetProfile method.
		OrganizationSetProfile []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// OrgProfileDTO is the orgProfileDTO argument value.
			OrgProfileDTO *dto.OrganizationProfile
		}
		// SegmentCreate holds details about calls to the SegmentCreate method.
		SegmentCreate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// SegmentDTO is the segmentDTO argument value.
			SegmentDTO *dto.Segment
		}
		// SegmentDelete holds details about calls to the SegmentDelete method.
		SegmentDelete []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// DeleteSegmentDTO is the deleteSegmentDTO argument value.
			DeleteSegmentDTO *dto.DeleteSegment
		}
		// SegmentList holds details about calls to the SegmentList method.
		SegmentList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.SegmentListParams
		}
		// SegmentPreview holds details about calls to the SegmentPreview method.
		SegmentPreview []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.SegmentPreviewParams
		}
		// SegmentUpdate holds details about calls to the SegmentUpdate method.
		SegmentUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// SegmentDTO is the segmentDTO argument value.
			SegmentDTO *dto.Segment
		}
		// SendSystemEmail holds details about calls to the SendSystemEmail method.
		SendSystemEmail []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// SystemEmail is the systemEmail argument value.
			SystemEmail *dto.SystemEmail
		}
		// TaskExecAbort holds details about calls to the TaskExecAbort method.
		TaskExecAbort []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.TaskExecAbortParams
		}
		// TaskExecCreate holds details about calls to the TaskExecCreate method.
		TaskExecCreate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.TaskExecCreateParams
		}
		// TaskExecDo holds details about calls to the TaskExecDo method.
		TaskExecDo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID string
			// Payload is the payload argument value.
			Payload *dto.TaskExecRequestPayload
		}
		// TaskExecJobInfo holds details about calls to the TaskExecJobInfo method.
		TaskExecJobInfo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.TaskExecJobInfoParams
		}
		// TaskExecJobs holds details about calls to the TaskExecJobs method.
		TaskExecJobs []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.TaskExecJobsParams
		}
		// TaskExecList holds details about calls to the TaskExecList method.
		TaskExecList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.TaskExecListParams
		}
		// TaskList holds details about calls to the TaskList method.
		TaskList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.TaskListParams
		}
		// TaskRun holds details about calls to the TaskRun method.
		TaskRun []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.TaskRunParams
		}
		// TaskWakeUpCron holds details about calls to the TaskWakeUpCron method.
		TaskWakeUpCron []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
		}
		// UserList holds details about calls to the UserList method.
		UserList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Params is the params argument value.
			Params *dto.UserListParams
		}
		// UserShow holds details about calls to the UserShow method.
		UserShow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID string
			// AccountID is the accountID argument value.
			AccountID string
			// UserExternalID is the userExternalID argument value.
			UserExternalID string
		}
		// WorkspaceCreate holds details about calls to the WorkspaceCreate method.
		WorkspaceCreate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// WorkspaceDTO is the workspaceDTO argument value.
			WorkspaceDTO *dto.WorkspaceCreate
		}
		// WorkspaceCreateOrResetDemo holds details about calls to the WorkspaceCreateOrResetDemo method.
		WorkspaceCreateOrResetDemo []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// WorkspaceDemoDTO is the workspaceDemoDTO argument value.
			WorkspaceDemoDTO *dto.WorkspaceCreateOrResetDemo
		}
		// WorkspaceGetSecretKey holds details about calls to the WorkspaceGetSecretKey method.
		WorkspaceGetSecretKey []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID string
		}
		// WorkspaceList holds details about calls to the WorkspaceList method.
		WorkspaceList []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// OrganizationID is the organizationID argument value.
			OrganizationID string
		}
		// WorkspaceShow holds details about calls to the WorkspaceShow method.
		WorkspaceShow []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID string
		}
		// WorkspaceShowTables holds details about calls to the WorkspaceShowTables method.
		WorkspaceShowTables []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// WorkspaceID is the workspaceID argument value.
			WorkspaceID string
		}
		// WorkspaceUpdate holds details about calls to the WorkspaceUpdate method.
		WorkspaceUpdate []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// AccountID is the accountID argument value.
			AccountID string
			// Payload is the payload argument value.
			Payload *dto.WorkspaceUpdate
		}
	}
	lockAccountConsumeResetPassword             sync.RWMutex
	lockAccountLogin                            sync.RWMutex
	lockAccountLogout                           sync.RWMutex
	lockAccountRefreshAccessToken               sync.RWMutex
	lockAccountResetPassword                    sync.RWMutex
	lockAccountSetProfile                       sync.RWMutex
	lockAppActivate                             sync.RWMutex
	lockAppDelete                               sync.RWMutex
	lockAppExecQuery                            sync.RWMutex
	lockAppFromToken                            sync.RWMutex
	lockAppGet                                  sync.RWMutex
	lockAppInstall                              sync.RWMutex
	lockAppList                                 sync.RWMutex
	lockAppMutateState                          sync.RWMutex
	lockAppStop                                 sync.RWMutex
	lockChannelCreate                           sync.RWMutex
	lockChannelDelete                           sync.RWMutex
	lockChannelGroupDelete                      sync.RWMutex
	lockChannelGroupUpsert                      sync.RWMutex
	lockChannelUpdate                           sync.RWMutex
	lockCubeJSSchemas                           sync.RWMutex
	lockDBSelect                                sync.RWMutex
	lockDataHookUpdate                          sync.RWMutex
	lockDataLogImportFromQueue                  sync.RWMutex
	lockDataLogList                             sync.RWMutex
	lockDataLogReprocessOne                     sync.RWMutex
	lockDataLogReprocessUntil                   sync.RWMutex
	lockDevAddDataImportToQueue                 sync.RWMutex
	lockDevExecDataImportFromQueue              sync.RWMutex
	lockDevExecTaskWithWorkers                  sync.RWMutex
	lockDevResetDB                              sync.RWMutex
	lockDoDBSelect                              sync.RWMutex
	lockDomainDelete                            sync.RWMutex
	lockDomainUpsert                            sync.RWMutex
	lockExecuteMigration                        sync.RWMutex
	lockFolderFiles                             sync.RWMutex
	lockGetConfig                               sync.RWMutex
	lockGetWorkspaceForAccount                  sync.RWMutex
	lockInstallOrVerifyServer                   sync.RWMutex
	lockIsAccountOfOrganization                 sync.RWMutex
	lockIsOwnerOfOrganization                   sync.RWMutex
	lockOrganizationAccountCreateServiceAccount sync.RWMutex
	lockOrganizationAccountDeactivate           sync.RWMutex
	lockOrganizationAccountList                 sync.RWMutex
	lockOrganizationAccountTransferOwnership    sync.RWMutex
	lockOrganizationCreate                      sync.RWMutex
	lockOrganizationInvitationCancel            sync.RWMutex
	lockOrganizationInvitationConsume           sync.RWMutex
	lockOrganizationInvitationCreate            sync.RWMutex
	lockOrganizationInvitationList              sync.RWMutex
	lockOrganizationInvitationRead              sync.RWMutex
	lockOrganizationList                        sync.RWMutex
	lockOrganizationSetProfile                  sync.RWMutex
	lockSegmentCreate                           sync.RWMutex
	lockSegmentDelete                           sync.RWMutex
	lockSegmentList                             sync.RWMutex
	lockSegmentPreview                          sync.RWMutex
	lockSegmentUpdate                           sync.RWMutex
	lockSendSystemEmail                         sync.RWMutex
	lockTaskExecAbort                           sync.RWMutex
	lockTaskExecCreate                          sync.RWMutex
	lockTaskExecDo                              sync.RWMutex
	lockTaskExecJobInfo                         sync.RWMutex
	lockTaskExecJobs                            sync.RWMutex
	lockTaskExecList                            sync.RWMutex
	lockTaskList                                sync.RWMutex
	lockTaskRun                                 sync.RWMutex
	lockTaskWakeUpCron                          sync.RWMutex
	lockUserList                                sync.RWMutex
	lockUserShow                                sync.RWMutex
	lockWorkspaceCreate                         sync.RWMutex
	lockWorkspaceCreateOrResetDemo              sync.RWMutex
	lockWorkspaceGetSecretKey                   sync.RWMutex
	lockWorkspaceList                           sync.RWMutex
	lockWorkspaceShow                           sync.RWMutex
	lockWorkspaceShowTables                     sync.RWMutex
	lockWorkspaceUpdate                         sync.RWMutex
}

// AccountConsumeResetPassword calls AccountConsumeResetPasswordFunc.
func (mock *ServiceMock) AccountConsumeResetPassword(ctx context.Context, resetPasswordDTO *dto.AccountConsumeResetPassword) (*dto.AccountLoginResult, int, error) {
	if mock.AccountConsumeResetPasswordFunc == nil {
		panic("ServiceMock.AccountConsumeResetPasswordFunc: method is nil but Service.AccountConsumeResetPassword was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ResetPasswordDTO *dto.AccountConsumeResetPassword
	}{
		Ctx:              ctx,
		ResetPasswordDTO: resetPasswordDTO,
	}
	mock.lockAccountConsumeResetPassword.Lock()
	mock.calls.AccountConsumeResetPassword = append(mock.calls.AccountConsumeResetPassword, callInfo)
	mock.lockAccountConsumeResetPassword.Unlock()
	return mock.AccountConsumeResetPasswordFunc(ctx, resetPasswordDTO)
}

// AccountConsumeResetPasswordCalls gets all the calls that were made to AccountConsumeResetPassword.
// Check the length with:
//
//	len(mockedService.AccountConsumeResetPasswordCalls())
func (mock *ServiceMock) AccountConsumeResetPasswordCalls() []struct {
	Ctx              context.Context
	ResetPasswordDTO *dto.AccountConsumeResetPassword
} {
	var calls []struct {
		Ctx              context.Context
		ResetPasswordDTO *dto.AccountConsumeResetPassword
	}
	mock.lockAccountConsumeResetPassword.RLock()
	calls = mock.calls.AccountConsumeResetPassword
	mock.lockAccountConsumeResetPassword.RUnlock()
	return calls
}

// AccountLogin calls AccountLoginFunc.
func (mock *ServiceMock) AccountLogin(ctx context.Context, loginDTO *dto.AccountLogin) (*dto.AccountLoginResult, int, error) {
	if mock.AccountLoginFunc == nil {
		panic("ServiceMock.AccountLoginFunc: method is nil but Service.AccountLogin was just called")
	}
	callInfo := struct {
		Ctx      context.Context
		LoginDTO *dto.AccountLogin
	}{
		Ctx:      ctx,
		LoginDTO: loginDTO,
	}
	mock.lockAccountLogin.Lock()
	mock.calls.AccountLogin = append(mock.calls.AccountLogin, callInfo)
	mock.lockAccountLogin.Unlock()
	return mock.AccountLoginFunc(ctx, loginDTO)
}

// AccountLoginCalls gets all the calls that were made to AccountLogin.
// Check the length with:
//
//	len(mockedService.AccountLoginCalls())
func (mock *ServiceMock) AccountLoginCalls() []struct {
	Ctx      context.Context
	LoginDTO *dto.AccountLogin
} {
	var calls []struct {
		Ctx      context.Context
		LoginDTO *dto.AccountLogin
	}
	mock.lockAccountLogin.RLock()
	calls = mock.calls.AccountLogin
	mock.lockAccountLogin.RUnlock()
	return calls
}

// AccountLogout calls AccountLogoutFunc.
func (mock *ServiceMock) AccountLogout(ctx context.Context, accountID string, sessionID string) (int, error) {
	if mock.AccountLogoutFunc == nil {
		panic("ServiceMock.AccountLogoutFunc: method is nil but Service.AccountLogout was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		SessionID string
	}{
		Ctx:       ctx,
		AccountID: accountID,
		SessionID: sessionID,
	}
	mock.lockAccountLogout.Lock()
	mock.calls.AccountLogout = append(mock.calls.AccountLogout, callInfo)
	mock.lockAccountLogout.Unlock()
	return mock.AccountLogoutFunc(ctx, accountID, sessionID)
}

// AccountLogoutCalls gets all the calls that were made to AccountLogout.
// Check the length with:
//
//	len(mockedService.AccountLogoutCalls())
func (mock *ServiceMock) AccountLogoutCalls() []struct {
	Ctx       context.Context
	AccountID string
	SessionID string
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		SessionID string
	}
	mock.lockAccountLogout.RLock()
	calls = mock.calls.AccountLogout
	mock.lockAccountLogout.RUnlock()
	return calls
}

// AccountRefreshAccessToken calls AccountRefreshAccessTokenFunc.
func (mock *ServiceMock) AccountRefreshAccessToken(ctx context.Context, accountID string, accountSessionID string) (*dto.AccountRefreshAccessTokenResult, int, error) {
	if mock.AccountRefreshAccessTokenFunc == nil {
		panic("ServiceMock.AccountRefreshAccessTokenFunc: method is nil but Service.AccountRefreshAccessToken was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AccountID        string
		AccountSessionID string
	}{
		Ctx:              ctx,
		AccountID:        accountID,
		AccountSessionID: accountSessionID,
	}
	mock.lockAccountRefreshAccessToken.Lock()
	mock.calls.AccountRefreshAccessToken = append(mock.calls.AccountRefreshAccessToken, callInfo)
	mock.lockAccountRefreshAccessToken.Unlock()
	return mock.AccountRefreshAccessTokenFunc(ctx, accountID, accountSessionID)
}

// AccountRefreshAccessTokenCalls gets all the calls that were made to AccountRefreshAccessToken.
// Check the length with:
//
//	len(mockedService.AccountRefreshAccessTokenCalls())
func (mock *ServiceMock) AccountRefreshAccessTokenCalls() []struct {
	Ctx              context.Context
	AccountID        string
	AccountSessionID string
} {
	var calls []struct {
		Ctx              context.Context
		AccountID        string
		AccountSessionID string
	}
	mock.lockAccountRefreshAccessToken.RLock()
	calls = mock.calls.AccountRefreshAccessToken
	mock.lockAccountRefreshAccessToken.RUnlock()
	return calls
}

// AccountResetPassword calls AccountResetPasswordFunc.
func (mock *ServiceMock) AccountResetPassword(ctx context.Context, resetPasswordDTO *dto.AccountResetPassword) (int, error) {
	if mock.AccountResetPasswordFunc == nil {
		panic("ServiceMock.AccountResetPasswordFunc: method is nil but Service.AccountResetPassword was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		ResetPasswordDTO *dto.AccountResetPassword
	}{
		Ctx:              ctx,
		ResetPasswordDTO: resetPasswordDTO,
	}
	mock.lockAccountResetPassword.Lock()
	mock.calls.AccountResetPassword = append(mock.calls.AccountResetPassword, callInfo)
	mock.lockAccountResetPassword.Unlock()
	return mock.AccountResetPasswordFunc(ctx, resetPasswordDTO)
}

// AccountResetPasswordCalls gets all the calls that were made to AccountResetPassword.
// Check the length with:
//
//	len(mockedService.AccountResetPasswordCalls())
func (mock *ServiceMock) AccountResetPasswordCalls() []struct {
	Ctx              context.Context
	ResetPasswordDTO *dto.AccountResetPassword
} {
	var calls []struct {
		Ctx              context.Context
		ResetPasswordDTO *dto.AccountResetPassword
	}
	mock.lockAccountResetPassword.RLock()
	calls = mock.calls.AccountResetPassword
	mock.lockAccountResetPassword.RUnlock()
	return calls
}

// AccountSetProfile calls AccountSetProfileFunc.
func (mock *ServiceMock) AccountSetProfile(ctx context.Context, accountID string, accountProfileDTO *dto.AccountProfile) (*entity.Account, int, error) {
	if mock.AccountSetProfileFunc == nil {
		panic("ServiceMock.AccountSetProfileFunc: method is nil but Service.AccountSetProfile was just called")
	}
	callInfo := struct {
		Ctx               context.Context
		AccountID         string
		AccountProfileDTO *dto.AccountProfile
	}{
		Ctx:               ctx,
		AccountID:         accountID,
		AccountProfileDTO: accountProfileDTO,
	}
	mock.lockAccountSetProfile.Lock()
	mock.calls.AccountSetProfile = append(mock.calls.AccountSetProfile, callInfo)
	mock.lockAccountSetProfile.Unlock()
	return mock.AccountSetProfileFunc(ctx, accountID, accountProfileDTO)
}

// AccountSetProfileCalls gets all the calls that were made to AccountSetProfile.
// Check the length with:
//
//	len(mockedService.AccountSetProfileCalls())
func (mock *ServiceMock) AccountSetProfileCalls() []struct {
	Ctx               context.Context
	AccountID         string
	AccountProfileDTO *dto.AccountProfile
} {
	var calls []struct {
		Ctx               context.Context
		AccountID         string
		AccountProfileDTO *dto.AccountProfile
	}
	mock.lockAccountSetProfile.RLock()
	calls = mock.calls.AccountSetProfile
	mock.lockAccountSetProfile.RUnlock()
	return calls
}

// AppActivate calls AppActivateFunc.
func (mock *ServiceMock) AppActivate(ctx context.Context, accountID string, params *dto.AppActivate) (int, error) {
	if mock.AppActivateFunc == nil {
		panic("ServiceMock.AppActivateFunc: method is nil but Service.AppActivate was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppActivate
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockAppActivate.Lock()
	mock.calls.AppActivate = append(mock.calls.AppActivate, callInfo)
	mock.lockAppActivate.Unlock()
	return mock.AppActivateFunc(ctx, accountID, params)
}

// AppActivateCalls gets all the calls that were made to AppActivate.
// Check the length with:
//
//	len(mockedService.AppActivateCalls())
func (mock *ServiceMock) AppActivateCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.AppActivate
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppActivate
	}
	mock.lockAppActivate.RLock()
	calls = mock.calls.AppActivate
	mock.lockAppActivate.RUnlock()
	return calls
}

// AppDelete calls AppDeleteFunc.
func (mock *ServiceMock) AppDelete(ctx context.Context, accountID string, params *dto.AppDelete) (int, error) {
	if mock.AppDeleteFunc == nil {
		panic("ServiceMock.AppDeleteFunc: method is nil but Service.AppDelete was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppDelete
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockAppDelete.Lock()
	mock.calls.AppDelete = append(mock.calls.AppDelete, callInfo)
	mock.lockAppDelete.Unlock()
	return mock.AppDeleteFunc(ctx, accountID, params)
}

// AppDeleteCalls gets all the calls that were made to AppDelete.
// Check the length with:
//
//	len(mockedService.AppDeleteCalls())
func (mock *ServiceMock) AppDeleteCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.AppDelete
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppDelete
	}
	mock.lockAppDelete.RLock()
	calls = mock.calls.AppDelete
	mock.lockAppDelete.RUnlock()
	return calls
}

// AppExecQuery calls AppExecQueryFunc.
func (mock *ServiceMock) AppExecQuery(ctx context.Context, accountID string, params *dto.AppExecQuery) (*dto.AppExecQueryResult, int, error) {
	if mock.AppExecQueryFunc == nil {
		panic("ServiceMock.AppExecQueryFunc: method is nil but Service.AppExecQuery was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppExecQuery
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockAppExecQuery.Lock()
	mock.calls.AppExecQuery = append(mock.calls.AppExecQuery, callInfo)
	mock.lockAppExecQuery.Unlock()
	return mock.AppExecQueryFunc(ctx, accountID, params)
}

// AppExecQueryCalls gets all the calls that were made to AppExecQuery.
// Check the length with:
//
//	len(mockedService.AppExecQueryCalls())
func (mock *ServiceMock) AppExecQueryCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.AppExecQuery
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppExecQuery
	}
	mock.lockAppExecQuery.RLock()
	calls = mock.calls.AppExecQuery
	mock.lockAppExecQuery.RUnlock()
	return calls
}

// AppFromToken calls AppFromTokenFunc.
func (mock *ServiceMock) AppFromToken(ctx context.Context, params *dto.AppFromTokenParams) (*dto.AppFromToken, int, error) {
	if mock.AppFromTokenFunc == nil {
		panic("ServiceMock.AppFromTokenFunc: method is nil but Service.AppFromToken was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Params *dto.AppFromTokenParams
	}{
		Ctx:    ctx,
		Params: params,
	}
	mock.lockAppFromToken.Lock()
	mock.calls.AppFromToken = append(mock.calls.AppFromToken, callInfo)
	mock.lockAppFromToken.Unlock()
	return mock.AppFromTokenFunc(ctx, params)
}

// AppFromTokenCalls gets all the calls that were made to AppFromToken.
// Check the length with:
//
//	len(mockedService.AppFromTokenCalls())
func (mock *ServiceMock) AppFromTokenCalls() []struct {
	Ctx    context.Context
	Params *dto.AppFromTokenParams
} {
	var calls []struct {
		Ctx    context.Context
		Params *dto.AppFromTokenParams
	}
	mock.lockAppFromToken.RLock()
	calls = mock.calls.AppFromToken
	mock.lockAppFromToken.RUnlock()
	return calls
}

// AppGet calls AppGetFunc.
func (mock *ServiceMock) AppGet(ctx context.Context, accountID string, params *dto.AppGetParams) (*entity.App, int, error) {
	if mock.AppGetFunc == nil {
		panic("ServiceMock.AppGetFunc: method is nil but Service.AppGet was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppGetParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockAppGet.Lock()
	mock.calls.AppGet = append(mock.calls.AppGet, callInfo)
	mock.lockAppGet.Unlock()
	return mock.AppGetFunc(ctx, accountID, params)
}

// AppGetCalls gets all the calls that were made to AppGet.
// Check the length with:
//
//	len(mockedService.AppGetCalls())
func (mock *ServiceMock) AppGetCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.AppGetParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppGetParams
	}
	mock.lockAppGet.RLock()
	calls = mock.calls.AppGet
	mock.lockAppGet.RUnlock()
	return calls
}

// AppInstall calls AppInstallFunc.
func (mock *ServiceMock) AppInstall(ctx context.Context, accountID string, params *dto.AppInstall) (*entity.App, int, error) {
	if mock.AppInstallFunc == nil {
		panic("ServiceMock.AppInstallFunc: method is nil but Service.AppInstall was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppInstall
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockAppInstall.Lock()
	mock.calls.AppInstall = append(mock.calls.AppInstall, callInfo)
	mock.lockAppInstall.Unlock()
	return mock.AppInstallFunc(ctx, accountID, params)
}

// AppInstallCalls gets all the calls that were made to AppInstall.
// Check the length with:
//
//	len(mockedService.AppInstallCalls())
func (mock *ServiceMock) AppInstallCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.AppInstall
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppInstall
	}
	mock.lockAppInstall.RLock()
	calls = mock.calls.AppInstall
	mock.lockAppInstall.RUnlock()
	return calls
}

// AppList calls AppListFunc.
func (mock *ServiceMock) AppList(ctx context.Context, accountID string, params *dto.AppListParams) (*dto.AppListResult, int, error) {
	if mock.AppListFunc == nil {
		panic("ServiceMock.AppListFunc: method is nil but Service.AppList was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppListParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockAppList.Lock()
	mock.calls.AppList = append(mock.calls.AppList, callInfo)
	mock.lockAppList.Unlock()
	return mock.AppListFunc(ctx, accountID, params)
}

// AppListCalls gets all the calls that were made to AppList.
// Check the length with:
//
//	len(mockedService.AppListCalls())
func (mock *ServiceMock) AppListCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.AppListParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppListParams
	}
	mock.lockAppList.RLock()
	calls = mock.calls.AppList
	mock.lockAppList.RUnlock()
	return calls
}

// AppMutateState calls AppMutateStateFunc.
func (mock *ServiceMock) AppMutateState(ctx context.Context, accountID string, params *dto.AppMutateState) (int, error) {
	if mock.AppMutateStateFunc == nil {
		panic("ServiceMock.AppMutateStateFunc: method is nil but Service.AppMutateState was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppMutateState
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockAppMutateState.Lock()
	mock.calls.AppMutateState = append(mock.calls.AppMutateState, callInfo)
	mock.lockAppMutateState.Unlock()
	return mock.AppMutateStateFunc(ctx, accountID, params)
}

// AppMutateStateCalls gets all the calls that were made to AppMutateState.
// Check the length with:
//
//	len(mockedService.AppMutateStateCalls())
func (mock *ServiceMock) AppMutateStateCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.AppMutateState
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppMutateState
	}
	mock.lockAppMutateState.RLock()
	calls = mock.calls.AppMutateState
	mock.lockAppMutateState.RUnlock()
	return calls
}

// AppStop calls AppStopFunc.
func (mock *ServiceMock) AppStop(ctx context.Context, accountID string, params *dto.AppDelete) (*entity.App, int, error) {
	if mock.AppStopFunc == nil {
		panic("ServiceMock.AppStopFunc: method is nil but Service.AppStop was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppDelete
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockAppStop.Lock()
	mock.calls.AppStop = append(mock.calls.AppStop, callInfo)
	mock.lockAppStop.Unlock()
	return mock.AppStopFunc(ctx, accountID, params)
}

// AppStopCalls gets all the calls that were made to AppStop.
// Check the length with:
//
//	len(mockedService.AppStopCalls())
func (mock *ServiceMock) AppStopCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.AppDelete
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.AppDelete
	}
	mock.lockAppStop.RLock()
	calls = mock.calls.AppStop
	mock.lockAppStop.RUnlock()
	return calls
}

// ChannelCreate calls ChannelCreateFunc.
func (mock *ServiceMock) ChannelCreate(ctx context.Context, accountID string, channelDTO *dto.Channel) (*entity.Workspace, int, error) {
	if mock.ChannelCreateFunc == nil {
		panic("ServiceMock.ChannelCreateFunc: method is nil but Service.ChannelCreate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		AccountID  string
		ChannelDTO *dto.Channel
	}{
		Ctx:        ctx,
		AccountID:  accountID,
		ChannelDTO: channelDTO,
	}
	mock.lockChannelCreate.Lock()
	mock.calls.ChannelCreate = append(mock.calls.ChannelCreate, callInfo)
	mock.lockChannelCreate.Unlock()
	return mock.ChannelCreateFunc(ctx, accountID, channelDTO)
}

// ChannelCreateCalls gets all the calls that were made to ChannelCreate.
// Check the length with:
//
//	len(mockedService.ChannelCreateCalls())
func (mock *ServiceMock) ChannelCreateCalls() []struct {
	Ctx        context.Context
	AccountID  string
	ChannelDTO *dto.Channel
} {
	var calls []struct {
		Ctx        context.Context
		AccountID  string
		ChannelDTO *dto.Channel
	}
	mock.lockChannelCreate.RLock()
	calls = mock.calls.ChannelCreate
	mock.lockChannelCreate.RUnlock()
	return calls
}

// ChannelDelete calls ChannelDeleteFunc.
func (mock *ServiceMock) ChannelDelete(ctx context.Context, accountID string, deleteChannelDTO *dto.DeleteChannel) (*entity.Workspace, int, error) {
	if mock.ChannelDeleteFunc == nil {
		panic("ServiceMock.ChannelDeleteFunc: method is nil but Service.ChannelDelete was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AccountID        string
		DeleteChannelDTO *dto.DeleteChannel
	}{
		Ctx:              ctx,
		AccountID:        accountID,
		DeleteChannelDTO: deleteChannelDTO,
	}
	mock.lockChannelDelete.Lock()
	mock.calls.ChannelDelete = append(mock.calls.ChannelDelete, callInfo)
	mock.lockChannelDelete.Unlock()
	return mock.ChannelDeleteFunc(ctx, accountID, deleteChannelDTO)
}

// ChannelDeleteCalls gets all the calls that were made to ChannelDelete.
// Check the length with:
//
//	len(mockedService.ChannelDeleteCalls())
func (mock *ServiceMock) ChannelDeleteCalls() []struct {
	Ctx              context.Context
	AccountID        string
	DeleteChannelDTO *dto.DeleteChannel
} {
	var calls []struct {
		Ctx              context.Context
		AccountID        string
		DeleteChannelDTO *dto.DeleteChannel
	}
	mock.lockChannelDelete.RLock()
	calls = mock.calls.ChannelDelete
	mock.lockChannelDelete.RUnlock()
	return calls
}

// ChannelGroupDelete calls ChannelGroupDeleteFunc.
func (mock *ServiceMock) ChannelGroupDelete(ctx context.Context, accountID string, deleteChannelGroupDTO *dto.DeleteChannelGroup) (*entity.Workspace, int, error) {
	if mock.ChannelGroupDeleteFunc == nil {
		panic("ServiceMock.ChannelGroupDeleteFunc: method is nil but Service.ChannelGroupDelete was just called")
	}
	callInfo := struct {
		Ctx                   context.Context
		AccountID             string
		DeleteChannelGroupDTO *dto.DeleteChannelGroup
	}{
		Ctx:                   ctx,
		AccountID:             accountID,
		DeleteChannelGroupDTO: deleteChannelGroupDTO,
	}
	mock.lockChannelGroupDelete.Lock()
	mock.calls.ChannelGroupDelete = append(mock.calls.ChannelGroupDelete, callInfo)
	mock.lockChannelGroupDelete.Unlock()
	return mock.ChannelGroupDeleteFunc(ctx, accountID, deleteChannelGroupDTO)
}

// ChannelGroupDeleteCalls gets all the calls that were made to ChannelGroupDelete.
// Check the length with:
//
//	len(mockedService.ChannelGroupDeleteCalls())
func (mock *ServiceMock) ChannelGroupDeleteCalls() []struct {
	Ctx                   context.Context
	AccountID             string
	DeleteChannelGroupDTO *dto.DeleteChannelGroup
} {
	var calls []struct {
		Ctx                   context.Context
		AccountID             string
		DeleteChannelGroupDTO *dto.DeleteChannelGroup
	}
	mock.lockChannelGroupDelete.RLock()
	calls = mock.calls.ChannelGroupDelete
	mock.lockChannelGroupDelete.RUnlock()
	return calls
}

// ChannelGroupUpsert calls ChannelGroupUpsertFunc.
func (mock *ServiceMock) ChannelGroupUpsert(ctx context.Context, accountID string, channelGroupDTO *dto.ChannelGroup) (*entity.Workspace, int, error) {
	if mock.ChannelGroupUpsertFunc == nil {
		panic("ServiceMock.ChannelGroupUpsertFunc: method is nil but Service.ChannelGroupUpsert was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		AccountID       string
		ChannelGroupDTO *dto.ChannelGroup
	}{
		Ctx:             ctx,
		AccountID:       accountID,
		ChannelGroupDTO: channelGroupDTO,
	}
	mock.lockChannelGroupUpsert.Lock()
	mock.calls.ChannelGroupUpsert = append(mock.calls.ChannelGroupUpsert, callInfo)
	mock.lockChannelGroupUpsert.Unlock()
	return mock.ChannelGroupUpsertFunc(ctx, accountID, channelGroupDTO)
}

// ChannelGroupUpsertCalls gets all the calls that were made to ChannelGroupUpsert.
// Check the length with:
//
//	len(mockedService.ChannelGroupUpsertCalls())
func (mock *ServiceMock) ChannelGroupUpsertCalls() []struct {
	Ctx             context.Context
	AccountID       string
	ChannelGroupDTO *dto.ChannelGroup
} {
	var calls []struct {
		Ctx             context.Context
		AccountID       string
		ChannelGroupDTO *dto.ChannelGroup
	}
	mock.lockChannelGroupUpsert.RLock()
	calls = mock.calls.ChannelGroupUpsert
	mock.lockChannelGroupUpsert.RUnlock()
	return calls
}

// ChannelUpdate calls ChannelUpdateFunc.
func (mock *ServiceMock) ChannelUpdate(ctx context.Context, accountID string, channelDTO *dto.Channel) (*entity.Workspace, int, error) {
	if mock.ChannelUpdateFunc == nil {
		panic("ServiceMock.ChannelUpdateFunc: method is nil but Service.ChannelUpdate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		AccountID  string
		ChannelDTO *dto.Channel
	}{
		Ctx:        ctx,
		AccountID:  accountID,
		ChannelDTO: channelDTO,
	}
	mock.lockChannelUpdate.Lock()
	mock.calls.ChannelUpdate = append(mock.calls.ChannelUpdate, callInfo)
	mock.lockChannelUpdate.Unlock()
	return mock.ChannelUpdateFunc(ctx, accountID, channelDTO)
}

// ChannelUpdateCalls gets all the calls that were made to ChannelUpdate.
// Check the length with:
//
//	len(mockedService.ChannelUpdateCalls())
func (mock *ServiceMock) ChannelUpdateCalls() []struct {
	Ctx        context.Context
	AccountID  string
	ChannelDTO *dto.Channel
} {
	var calls []struct {
		Ctx        context.Context
		AccountID  string
		ChannelDTO *dto.Channel
	}
	mock.lockChannelUpdate.RLock()
	calls = mock.calls.ChannelUpdate
	mock.lockChannelUpdate.RUnlock()
	return calls
}

// CubeJSSchemas calls CubeJSSchemasFunc.
func (mock *ServiceMock) CubeJSSchemas(ctx context.Context, accountID string, workspaceID string) (dto.CubeJSSchemas, int, error) {
	if mock.CubeJSSchemasFunc == nil {
		panic("ServiceMock.CubeJSSchemasFunc: method is nil but Service.CubeJSSchemas was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccountID   string
		WorkspaceID string
	}{
		Ctx:         ctx,
		AccountID:   accountID,
		WorkspaceID: workspaceID,
	}
	mock.lockCubeJSSchemas.Lock()
	mock.calls.CubeJSSchemas = append(mock.calls.CubeJSSchemas, callInfo)
	mock.lockCubeJSSchemas.Unlock()
	return mock.CubeJSSchemasFunc(ctx, accountID, workspaceID)
}

// CubeJSSchemasCalls gets all the calls that were made to CubeJSSchemas.
// Check the length with:
//
//	len(mockedService.CubeJSSchemasCalls())
func (mock *ServiceMock) CubeJSSchemasCalls() []struct {
	Ctx         context.Context
	AccountID   string
	WorkspaceID string
} {
	var calls []struct {
		Ctx         context.Context
		AccountID   string
		WorkspaceID string
	}
	mock.lockCubeJSSchemas.RLock()
	calls = mock.calls.CubeJSSchemas
	mock.lockCubeJSSchemas.RUnlock()
	return calls
}

// DBSelect calls DBSelectFunc.
func (mock *ServiceMock) DBSelect(ctx context.Context, accountID string, params *dto.DBSelectParams) ([]map[string]interface{}, int, error) {
	if mock.DBSelectFunc == nil {
		panic("ServiceMock.DBSelectFunc: method is nil but Service.DBSelect was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.DBSelectParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockDBSelect.Lock()
	mock.calls.DBSelect = append(mock.calls.DBSelect, callInfo)
	mock.lockDBSelect.Unlock()
	return mock.DBSelectFunc(ctx, accountID, params)
}

// DBSelectCalls gets all the calls that were made to DBSelect.
// Check the length with:
//
//	len(mockedService.DBSelectCalls())
func (mock *ServiceMock) DBSelectCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.DBSelectParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.DBSelectParams
	}
	mock.lockDBSelect.RLock()
	calls = mock.calls.DBSelect
	mock.lockDBSelect.RUnlock()
	return calls
}

// DataHookUpdate calls DataHookUpdateFunc.
func (mock *ServiceMock) DataHookUpdate(ctx context.Context, accountID string, dataHookDTO *dto.DataHook) (*entity.Workspace, int, error) {
	if mock.DataHookUpdateFunc == nil {
		panic("ServiceMock.DataHookUpdateFunc: method is nil but Service.DataHookUpdate was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccountID   string
		DataHookDTO *dto.DataHook
	}{
		Ctx:         ctx,
		AccountID:   accountID,
		DataHookDTO: dataHookDTO,
	}
	mock.lockDataHookUpdate.Lock()
	mock.calls.DataHookUpdate = append(mock.calls.DataHookUpdate, callInfo)
	mock.lockDataHookUpdate.Unlock()
	return mock.DataHookUpdateFunc(ctx, accountID, dataHookDTO)
}

// DataHookUpdateCalls gets all the calls that were made to DataHookUpdate.
// Check the length with:
//
//	len(mockedService.DataHookUpdateCalls())
func (mock *ServiceMock) DataHookUpdateCalls() []struct {
	Ctx         context.Context
	AccountID   string
	DataHookDTO *dto.DataHook
} {
	var calls []struct {
		Ctx         context.Context
		AccountID   string
		DataHookDTO *dto.DataHook
	}
	mock.lockDataHookUpdate.RLock()
	calls = mock.calls.DataHookUpdate
	mock.lockDataHookUpdate.RUnlock()
	return calls
}

// DataLogImportFromQueue calls DataLogImportFromQueueFunc.
func (mock *ServiceMock) DataLogImportFromQueue(ctx context.Context, dataLogInQueue *common.DataLogInQueue) *common.DataLogInQueueResult {
	if mock.DataLogImportFromQueueFunc == nil {
		panic("ServiceMock.DataLogImportFromQueueFunc: method is nil but Service.DataLogImportFromQueue was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		DataLogInQueue *common.DataLogInQueue
	}{
		Ctx:            ctx,
		DataLogInQueue: dataLogInQueue,
	}
	mock.lockDataLogImportFromQueue.Lock()
	mock.calls.DataLogImportFromQueue = append(mock.calls.DataLogImportFromQueue, callInfo)
	mock.lockDataLogImportFromQueue.Unlock()
	return mock.DataLogImportFromQueueFunc(ctx, dataLogInQueue)
}

// DataLogImportFromQueueCalls gets all the calls that were made to DataLogImportFromQueue.
// Check the length with:
//
//	len(mockedService.DataLogImportFromQueueCalls())
func (mock *ServiceMock) DataLogImportFromQueueCalls() []struct {
	Ctx            context.Context
	DataLogInQueue *common.DataLogInQueue
} {
	var calls []struct {
		Ctx            context.Context
		DataLogInQueue *common.DataLogInQueue
	}
	mock.lockDataLogImportFromQueue.RLock()
	calls = mock.calls.DataLogImportFromQueue
	mock.lockDataLogImportFromQueue.RUnlock()
	return calls
}

// DataLogList calls DataLogListFunc.
func (mock *ServiceMock) DataLogList(ctx context.Context, accountID string, params *dto.DataLogListParams) (*dto.DataLogListResult, int, error) {
	if mock.DataLogListFunc == nil {
		panic("ServiceMock.DataLogListFunc: method is nil but Service.DataLogList was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.DataLogListParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockDataLogList.Lock()
	mock.calls.DataLogList = append(mock.calls.DataLogList, callInfo)
	mock.lockDataLogList.Unlock()
	return mock.DataLogListFunc(ctx, accountID, params)
}

// DataLogListCalls gets all the calls that were made to DataLogList.
// Check the length with:
//
//	len(mockedService.DataLogListCalls())
func (mock *ServiceMock) DataLogListCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.DataLogListParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.DataLogListParams
	}
	mock.lockDataLogList.RLock()
	calls = mock.calls.DataLogList
	mock.lockDataLogList.RUnlock()
	return calls
}

// DataLogReprocessOne calls DataLogReprocessOneFunc.
func (mock *ServiceMock) DataLogReprocessOne(ctx context.Context, accountID string, params *dto.DataLogReprocessOne) (*common.DataLogInQueueResult, int, error) {
	if mock.DataLogReprocessOneFunc == nil {
		panic("ServiceMock.DataLogReprocessOneFunc: method is nil but Service.DataLogReprocessOne was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.DataLogReprocessOne
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockDataLogReprocessOne.Lock()
	mock.calls.DataLogReprocessOne = append(mock.calls.DataLogReprocessOne, callInfo)
	mock.lockDataLogReprocessOne.Unlock()
	return mock.DataLogReprocessOneFunc(ctx, accountID, params)
}

// DataLogReprocessOneCalls gets all the calls that were made to DataLogReprocessOne.
// Check the length with:
//
//	len(mockedService.DataLogReprocessOneCalls())
func (mock *ServiceMock) DataLogReprocessOneCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.DataLogReprocessOne
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.DataLogReprocessOne
	}
	mock.lockDataLogReprocessOne.RLock()
	calls = mock.calls.DataLogReprocessOne
	mock.lockDataLogReprocessOne.RUnlock()
	return calls
}

// DataLogReprocessUntil calls DataLogReprocessUntilFunc.
func (mock *ServiceMock) DataLogReprocessUntil(ctx context.Context, untilDate time.Time) (int, error) {
	if mock.DataLogReprocessUntilFunc == nil {
		panic("ServiceMock.DataLogReprocessUntilFunc: method is nil but Service.DataLogReprocessUntil was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		UntilDate time.Time
	}{
		Ctx:       ctx,
		UntilDate: untilDate,
	}
	mock.lockDataLogReprocessUntil.Lock()
	mock.calls.DataLogReprocessUntil = append(mock.calls.DataLogReprocessUntil, callInfo)
	mock.lockDataLogReprocessUntil.Unlock()
	return mock.DataLogReprocessUntilFunc(ctx, untilDate)
}

// DataLogReprocessUntilCalls gets all the calls that were made to DataLogReprocessUntil.
// Check the length with:
//
//	len(mockedService.DataLogReprocessUntilCalls())
func (mock *ServiceMock) DataLogReprocessUntilCalls() []struct {
	Ctx       context.Context
	UntilDate time.Time
} {
	var calls []struct {
		Ctx       context.Context
		UntilDate time.Time
	}
	mock.lockDataLogReprocessUntil.RLock()
	calls = mock.calls.DataLogReprocessUntil
	mock.lockDataLogReprocessUntil.RUnlock()
	return calls
}

// DevAddDataImportToQueue calls DevAddDataImportToQueueFunc.
func (mock *ServiceMock) DevAddDataImportToQueue(dataLogInQueue *common.DataLogInQueue) {
	if mock.DevAddDataImportToQueueFunc == nil {
		panic("ServiceMock.DevAddDataImportToQueueFunc: method is nil but Service.DevAddDataImportToQueue was just called")
	}
	callInfo := struct {
		DataLogInQueue *common.DataLogInQueue
	}{
		DataLogInQueue: dataLogInQueue,
	}
	mock.lockDevAddDataImportToQueue.Lock()
	mock.calls.DevAddDataImportToQueue = append(mock.calls.DevAddDataImportToQueue, callInfo)
	mock.lockDevAddDataImportToQueue.Unlock()
	mock.DevAddDataImportToQueueFunc(dataLogInQueue)
}

// DevAddDataImportToQueueCalls gets all the calls that were made to DevAddDataImportToQueue.
// Check the length with:
//
//	len(mockedService.DevAddDataImportToQueueCalls())
func (mock *ServiceMock) DevAddDataImportToQueueCalls() []struct {
	DataLogInQueue *common.DataLogInQueue
} {
	var calls []struct {
		DataLogInQueue *common.DataLogInQueue
	}
	mock.lockDevAddDataImportToQueue.RLock()
	calls = mock.calls.DevAddDataImportToQueue
	mock.lockDevAddDataImportToQueue.RUnlock()
	return calls
}

// DevExecDataImportFromQueue calls DevExecDataImportFromQueueFunc.
func (mock *ServiceMock) DevExecDataImportFromQueue(ctx context.Context, concurrency int) (int, error) {
	if mock.DevExecDataImportFromQueueFunc == nil {
		panic("ServiceMock.DevExecDataImportFromQueueFunc: method is nil but Service.DevExecDataImportFromQueue was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Concurrency int
	}{
		Ctx:         ctx,
		Concurrency: concurrency,
	}
	mock.lockDevExecDataImportFromQueue.Lock()
	mock.calls.DevExecDataImportFromQueue = append(mock.calls.DevExecDataImportFromQueue, callInfo)
	mock.lockDevExecDataImportFromQueue.Unlock()
	return mock.DevExecDataImportFromQueueFunc(ctx, concurrency)
}

// DevExecDataImportFromQueueCalls gets all the calls that were made to DevExecDataImportFromQueue.
// Check the length with:
//
//	len(mockedService.DevExecDataImportFromQueueCalls())
func (mock *ServiceMock) DevExecDataImportFromQueueCalls() []struct {
	Ctx         context.Context
	Concurrency int
} {
	var calls []struct {
		Ctx         context.Context
		Concurrency int
	}
	mock.lockDevExecDataImportFromQueue.RLock()
	calls = mock.calls.DevExecDataImportFromQueue
	mock.lockDevExecDataImportFromQueue.RUnlock()
	return calls
}

// DevExecTaskWithWorkers calls DevExecTaskWithWorkersFunc.
func (mock *ServiceMock) DevExecTaskWithWorkers(ctx context.Context, workspaceID string) (int, error) {
	if mock.DevExecTaskWithWorkersFunc == nil {
		panic("ServiceMock.DevExecTaskWithWorkersFunc: method is nil but Service.DevExecTaskWithWorkers was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		WorkspaceID string
	}{
		Ctx:         ctx,
		WorkspaceID: workspaceID,
	}
	mock.lockDevExecTaskWithWorkers.Lock()
	mock.calls.DevExecTaskWithWorkers = append(mock.calls.DevExecTaskWithWorkers, callInfo)
	mock.lockDevExecTaskWithWorkers.Unlock()
	return mock.DevExecTaskWithWorkersFunc(ctx, workspaceID)
}

// DevExecTaskWithWorkersCalls gets all the calls that were made to DevExecTaskWithWorkers.
// Check the length with:
//
//	len(mockedService.DevExecTaskWithWorkersCalls())
func (mock *ServiceMock) DevExecTaskWithWorkersCalls() []struct {
	Ctx         context.Context
	WorkspaceID string
} {
	var calls []struct {
		Ctx         context.Context
		WorkspaceID string
	}
	mock.lockDevExecTaskWithWorkers.RLock()
	calls = mock.calls.DevExecTaskWithWorkers
	mock.lockDevExecTaskWithWorkers.RUnlock()
	return calls
}

// DevResetDB calls DevResetDBFunc.
func (mock *ServiceMock) DevResetDB(ctx context.Context) error {
	if mock.DevResetDBFunc == nil {
		panic("ServiceMock.DevResetDBFunc: method is nil but Service.DevResetDB was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockDevResetDB.Lock()
	mock.calls.DevResetDB = append(mock.calls.DevResetDB, callInfo)
	mock.lockDevResetDB.Unlock()
	return mock.DevResetDBFunc(ctx)
}

// DevResetDBCalls gets all the calls that were made to DevResetDB.
// Check the length with:
//
//	len(mockedService.DevResetDBCalls())
func (mock *ServiceMock) DevResetDBCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockDevResetDB.RLock()
	calls = mock.calls.DevResetDB
	mock.lockDevResetDB.RUnlock()
	return calls
}

// DoDBSelect calls DoDBSelectFunc.
func (mock *ServiceMock) DoDBSelect(workspaceID string, query string, args []interface{}) ([]byte, error) {
	if mock.DoDBSelectFunc == nil {
		panic("ServiceMock.DoDBSelectFunc: method is nil but Service.DoDBSelect was just called")
	}
	callInfo := struct {
		WorkspaceID string
		Query       string
		Args        []interface{}
	}{
		WorkspaceID: workspaceID,
		Query:       query,
		Args:        args,
	}
	mock.lockDoDBSelect.Lock()
	mock.calls.DoDBSelect = append(mock.calls.DoDBSelect, callInfo)
	mock.lockDoDBSelect.Unlock()
	return mock.DoDBSelectFunc(workspaceID, query, args)
}

// DoDBSelectCalls gets all the calls that were made to DoDBSelect.
// Check the length with:
//
//	len(mockedService.DoDBSelectCalls())
func (mock *ServiceMock) DoDBSelectCalls() []struct {
	WorkspaceID string
	Query       string
	Args        []interface{}
} {
	var calls []struct {
		WorkspaceID string
		Query       string
		Args        []interface{}
	}
	mock.lockDoDBSelect.RLock()
	calls = mock.calls.DoDBSelect
	mock.lockDoDBSelect.RUnlock()
	return calls
}

// DomainDelete calls DomainDeleteFunc.
func (mock *ServiceMock) DomainDelete(ctx context.Context, accountID string, domainDeleteDTO *dto.DomainDelete) (*entity.Workspace, int, error) {
	if mock.DomainDeleteFunc == nil {
		panic("ServiceMock.DomainDeleteFunc: method is nil but Service.DomainDelete was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		AccountID       string
		DomainDeleteDTO *dto.DomainDelete
	}{
		Ctx:             ctx,
		AccountID:       accountID,
		DomainDeleteDTO: domainDeleteDTO,
	}
	mock.lockDomainDelete.Lock()
	mock.calls.DomainDelete = append(mock.calls.DomainDelete, callInfo)
	mock.lockDomainDelete.Unlock()
	return mock.DomainDeleteFunc(ctx, accountID, domainDeleteDTO)
}

// DomainDeleteCalls gets all the calls that were made to DomainDelete.
// Check the length with:
//
//	len(mockedService.DomainDeleteCalls())
func (mock *ServiceMock) DomainDeleteCalls() []struct {
	Ctx             context.Context
	AccountID       string
	DomainDeleteDTO *dto.DomainDelete
} {
	var calls []struct {
		Ctx             context.Context
		AccountID       string
		DomainDeleteDTO *dto.DomainDelete
	}
	mock.lockDomainDelete.RLock()
	calls = mock.calls.DomainDelete
	mock.lockDomainDelete.RUnlock()
	return calls
}

// DomainUpsert calls DomainUpsertFunc.
func (mock *ServiceMock) DomainUpsert(ctx context.Context, accountID string, domainDTO *dto.Domain) (*entity.Workspace, int, error) {
	if mock.DomainUpsertFunc == nil {
		panic("ServiceMock.DomainUpsertFunc: method is nil but Service.DomainUpsert was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		DomainDTO *dto.Domain
	}{
		Ctx:       ctx,
		AccountID: accountID,
		DomainDTO: domainDTO,
	}
	mock.lockDomainUpsert.Lock()
	mock.calls.DomainUpsert = append(mock.calls.DomainUpsert, callInfo)
	mock.lockDomainUpsert.Unlock()
	return mock.DomainUpsertFunc(ctx, accountID, domainDTO)
}

// DomainUpsertCalls gets all the calls that were made to DomainUpsert.
// Check the length with:
//
//	len(mockedService.DomainUpsertCalls())
func (mock *ServiceMock) DomainUpsertCalls() []struct {
	Ctx       context.Context
	AccountID string
	DomainDTO *dto.Domain
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		DomainDTO *dto.Domain
	}
	mock.lockDomainUpsert.RLock()
	calls = mock.calls.DomainUpsert
	mock.lockDomainUpsert.RUnlock()
	return calls
}

// ExecuteMigration calls ExecuteMigrationFunc.
func (mock *ServiceMock) ExecuteMigration(ctx context.Context, installedVersion float64, codeVersion float64) error {
	if mock.ExecuteMigrationFunc == nil {
		panic("ServiceMock.ExecuteMigrationFunc: method is nil but Service.ExecuteMigration was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		InstalledVersion float64
		CodeVersion      float64
	}{
		Ctx:              ctx,
		InstalledVersion: installedVersion,
		CodeVersion:      codeVersion,
	}
	mock.lockExecuteMigration.Lock()
	mock.calls.ExecuteMigration = append(mock.calls.ExecuteMigration, callInfo)
	mock.lockExecuteMigration.Unlock()
	return mock.ExecuteMigrationFunc(ctx, installedVersion, codeVersion)
}

// ExecuteMigrationCalls gets all the calls that were made to ExecuteMigration.
// Check the length with:
//
//	len(mockedService.ExecuteMigrationCalls())
func (mock *ServiceMock) ExecuteMigrationCalls() []struct {
	Ctx              context.Context
	InstalledVersion float64
	CodeVersion      float64
} {
	var calls []struct {
		Ctx              context.Context
		InstalledVersion float64
		CodeVersion      float64
	}
	mock.lockExecuteMigration.RLock()
	calls = mock.calls.ExecuteMigration
	mock.lockExecuteMigration.RUnlock()
	return calls
}

// FolderFiles calls FolderFilesFunc.
func (mock *ServiceMock) FolderFiles(ctx context.Context, accountID string, params *dto.FolderFilesParams) (*dto.FolderFilesResult, int, error) {
	if mock.FolderFilesFunc == nil {
		panic("ServiceMock.FolderFilesFunc: method is nil but Service.FolderFiles was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.FolderFilesParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockFolderFiles.Lock()
	mock.calls.FolderFiles = append(mock.calls.FolderFiles, callInfo)
	mock.lockFolderFiles.Unlock()
	return mock.FolderFilesFunc(ctx, accountID, params)
}

// FolderFilesCalls gets all the calls that were made to FolderFiles.
// Check the length with:
//
//	len(mockedService.FolderFilesCalls())
func (mock *ServiceMock) FolderFilesCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.FolderFilesParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.FolderFilesParams
	}
	mock.lockFolderFiles.RLock()
	calls = mock.calls.FolderFiles
	mock.lockFolderFiles.RUnlock()
	return calls
}

// GetConfig calls GetConfigFunc.
func (mock *ServiceMock) GetConfig() *entity.Config {
	if mock.GetConfigFunc == nil {
		panic("ServiceMock.GetConfigFunc: method is nil but Service.GetConfig was just called")
	}
	callInfo := struct {
	}{}
	mock.lockGetConfig.Lock()
	mock.calls.GetConfig = append(mock.calls.GetConfig, callInfo)
	mock.lockGetConfig.Unlock()
	return mock.GetConfigFunc()
}

// GetConfigCalls gets all the calls that were made to GetConfig.
// Check the length with:
//
//	len(mockedService.GetConfigCalls())
func (mock *ServiceMock) GetConfigCalls() []struct {
} {
	var calls []struct {
	}
	mock.lockGetConfig.RLock()
	calls = mock.calls.GetConfig
	mock.lockGetConfig.RUnlock()
	return calls
}

// GetWorkspaceForAccount calls GetWorkspaceForAccountFunc.
func (mock *ServiceMock) GetWorkspaceForAccount(ctx context.Context, workspaceID string, accountID string) (*entity.Workspace, int, error) {
	if mock.GetWorkspaceForAccountFunc == nil {
		panic("ServiceMock.GetWorkspaceForAccountFunc: method is nil but Service.GetWorkspaceForAccount was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		WorkspaceID string
		AccountID   string
	}{
		Ctx:         ctx,
		WorkspaceID: workspaceID,
		AccountID:   accountID,
	}
	mock.lockGetWorkspaceForAccount.Lock()
	mock.calls.GetWorkspaceForAccount = append(mock.calls.GetWorkspaceForAccount, callInfo)
	mock.lockGetWorkspaceForAccount.Unlock()
	return mock.GetWorkspaceForAccountFunc(ctx, workspaceID, accountID)
}

// GetWorkspaceForAccountCalls gets all the calls that were made to GetWorkspaceForAccount.
// Check the length with:
//
//	len(mockedService.GetWorkspaceForAccountCalls())
func (mock *ServiceMock) GetWorkspaceForAccountCalls() []struct {
	Ctx         context.Context
	WorkspaceID string
	AccountID   string
} {
	var calls []struct {
		Ctx         context.Context
		WorkspaceID string
		AccountID   string
	}
	mock.lockGetWorkspaceForAccount.RLock()
	calls = mock.calls.GetWorkspaceForAccount
	mock.lockGetWorkspaceForAccount.RUnlock()
	return calls
}

// InstallOrVerifyServer calls InstallOrVerifyServerFunc.
func (mock *ServiceMock) InstallOrVerifyServer(ctx context.Context) (bool, error) {
	if mock.InstallOrVerifyServerFunc == nil {
		panic("ServiceMock.InstallOrVerifyServerFunc: method is nil but Service.InstallOrVerifyServer was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockInstallOrVerifyServer.Lock()
	mock.calls.InstallOrVerifyServer = append(mock.calls.InstallOrVerifyServer, callInfo)
	mock.lockInstallOrVerifyServer.Unlock()
	return mock.InstallOrVerifyServerFunc(ctx)
}

// InstallOrVerifyServerCalls gets all the calls that were made to InstallOrVerifyServer.
// Check the length with:
//
//	len(mockedService.InstallOrVerifyServerCalls())
func (mock *ServiceMock) InstallOrVerifyServerCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockInstallOrVerifyServer.RLock()
	calls = mock.calls.InstallOrVerifyServer
	mock.lockInstallOrVerifyServer.RUnlock()
	return calls
}

// IsAccountOfOrganization calls IsAccountOfOrganizationFunc.
func (mock *ServiceMock) IsAccountOfOrganization(ctx context.Context, accountId string, organizationId string) (bool, int, error) {
	if mock.IsAccountOfOrganizationFunc == nil {
		panic("ServiceMock.IsAccountOfOrganizationFunc: method is nil but Service.IsAccountOfOrganization was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AccountId      string
		OrganizationId string
	}{
		Ctx:            ctx,
		AccountId:      accountId,
		OrganizationId: organizationId,
	}
	mock.lockIsAccountOfOrganization.Lock()
	mock.calls.IsAccountOfOrganization = append(mock.calls.IsAccountOfOrganization, callInfo)
	mock.lockIsAccountOfOrganization.Unlock()
	return mock.IsAccountOfOrganizationFunc(ctx, accountId, organizationId)
}

// IsAccountOfOrganizationCalls gets all the calls that were made to IsAccountOfOrganization.
// Check the length with:
//
//	len(mockedService.IsAccountOfOrganizationCalls())
func (mock *ServiceMock) IsAccountOfOrganizationCalls() []struct {
	Ctx            context.Context
	AccountId      string
	OrganizationId string
} {
	var calls []struct {
		Ctx            context.Context
		AccountId      string
		OrganizationId string
	}
	mock.lockIsAccountOfOrganization.RLock()
	calls = mock.calls.IsAccountOfOrganization
	mock.lockIsAccountOfOrganization.RUnlock()
	return calls
}

// IsOwnerOfOrganization calls IsOwnerOfOrganizationFunc.
func (mock *ServiceMock) IsOwnerOfOrganization(ctx context.Context, accountId string, organizationId string) (bool, int, error) {
	if mock.IsOwnerOfOrganizationFunc == nil {
		panic("ServiceMock.IsOwnerOfOrganizationFunc: method is nil but Service.IsOwnerOfOrganization was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AccountId      string
		OrganizationId string
	}{
		Ctx:            ctx,
		AccountId:      accountId,
		OrganizationId: organizationId,
	}
	mock.lockIsOwnerOfOrganization.Lock()
	mock.calls.IsOwnerOfOrganization = append(mock.calls.IsOwnerOfOrganization, callInfo)
	mock.lockIsOwnerOfOrganization.Unlock()
	return mock.IsOwnerOfOrganizationFunc(ctx, accountId, organizationId)
}

// IsOwnerOfOrganizationCalls gets all the calls that were made to IsOwnerOfOrganization.
// Check the length with:
//
//	len(mockedService.IsOwnerOfOrganizationCalls())
func (mock *ServiceMock) IsOwnerOfOrganizationCalls() []struct {
	Ctx            context.Context
	AccountId      string
	OrganizationId string
} {
	var calls []struct {
		Ctx            context.Context
		AccountId      string
		OrganizationId string
	}
	mock.lockIsOwnerOfOrganization.RLock()
	calls = mock.calls.IsOwnerOfOrganization
	mock.lockIsOwnerOfOrganization.RUnlock()
	return calls
}

// OrganizationAccountCreateServiceAccount calls OrganizationAccountCreateServiceAccountFunc.
func (mock *ServiceMock) OrganizationAccountCreateServiceAccount(ctx context.Context, accountID string, createServiceAccount *dto.OrganizationAccountCreateServiceAccount) (int, error) {
	if mock.OrganizationAccountCreateServiceAccountFunc == nil {
		panic("ServiceMock.OrganizationAccountCreateServiceAccountFunc: method is nil but Service.OrganizationAccountCreateServiceAccount was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		AccountID            string
		CreateServiceAccount *dto.OrganizationAccountCreateServiceAccount
	}{
		Ctx:                  ctx,
		AccountID:            accountID,
		CreateServiceAccount: createServiceAccount,
	}
	mock.lockOrganizationAccountCreateServiceAccount.Lock()
	mock.calls.OrganizationAccountCreateServiceAccount = append(mock.calls.OrganizationAccountCreateServiceAccount, callInfo)
	mock.lockOrganizationAccountCreateServiceAccount.Unlock()
	return mock.OrganizationAccountCreateServiceAccountFunc(ctx, accountID, createServiceAccount)
}

// OrganizationAccountCreateServiceAccountCalls gets all the calls that were made to OrganizationAccountCreateServiceAccount.
// Check the length with:
//
//	len(mockedService.OrganizationAccountCreateServiceAccountCalls())
func (mock *ServiceMock) OrganizationAccountCreateServiceAccountCalls() []struct {
	Ctx                  context.Context
	AccountID            string
	CreateServiceAccount *dto.OrganizationAccountCreateServiceAccount
} {
	var calls []struct {
		Ctx                  context.Context
		AccountID            string
		CreateServiceAccount *dto.OrganizationAccountCreateServiceAccount
	}
	mock.lockOrganizationAccountCreateServiceAccount.RLock()
	calls = mock.calls.OrganizationAccountCreateServiceAccount
	mock.lockOrganizationAccountCreateServiceAccount.RUnlock()
	return calls
}

// OrganizationAccountDeactivate calls OrganizationAccountDeactivateFunc.
func (mock *ServiceMock) OrganizationAccountDeactivate(ctx context.Context, accountID string, deactivateAccountDTO *dto.OrganizationAccountDeactivate) (int, error) {
	if mock.OrganizationAccountDeactivateFunc == nil {
		panic("ServiceMock.OrganizationAccountDeactivateFunc: method is nil but Service.OrganizationAccountDeactivate was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		AccountID            string
		DeactivateAccountDTO *dto.OrganizationAccountDeactivate
	}{
		Ctx:                  ctx,
		AccountID:            accountID,
		DeactivateAccountDTO: deactivateAccountDTO,
	}
	mock.lockOrganizationAccountDeactivate.Lock()
	mock.calls.OrganizationAccountDeactivate = append(mock.calls.OrganizationAccountDeactivate, callInfo)
	mock.lockOrganizationAccountDeactivate.Unlock()
	return mock.OrganizationAccountDeactivateFunc(ctx, accountID, deactivateAccountDTO)
}

// OrganizationAccountDeactivateCalls gets all the calls that were made to OrganizationAccountDeactivate.
// Check the length with:
//
//	len(mockedService.OrganizationAccountDeactivateCalls())
func (mock *ServiceMock) OrganizationAccountDeactivateCalls() []struct {
	Ctx                  context.Context
	AccountID            string
	DeactivateAccountDTO *dto.OrganizationAccountDeactivate
} {
	var calls []struct {
		Ctx                  context.Context
		AccountID            string
		DeactivateAccountDTO *dto.OrganizationAccountDeactivate
	}
	mock.lockOrganizationAccountDeactivate.RLock()
	calls = mock.calls.OrganizationAccountDeactivate
	mock.lockOrganizationAccountDeactivate.RUnlock()
	return calls
}

// OrganizationAccountList calls OrganizationAccountListFunc.
func (mock *ServiceMock) OrganizationAccountList(ctx context.Context, accountID string, organizationID string) (*dto.OrganizationAccountListResult, int, error) {
	if mock.OrganizationAccountListFunc == nil {
		panic("ServiceMock.OrganizationAccountListFunc: method is nil but Service.OrganizationAccountList was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AccountID      string
		OrganizationID string
	}{
		Ctx:            ctx,
		AccountID:      accountID,
		OrganizationID: organizationID,
	}
	mock.lockOrganizationAccountList.Lock()
	mock.calls.OrganizationAccountList = append(mock.calls.OrganizationAccountList, callInfo)
	mock.lockOrganizationAccountList.Unlock()
	return mock.OrganizationAccountListFunc(ctx, accountID, organizationID)
}

// OrganizationAccountListCalls gets all the calls that were made to OrganizationAccountList.
// Check the length with:
//
//	len(mockedService.OrganizationAccountListCalls())
func (mock *ServiceMock) OrganizationAccountListCalls() []struct {
	Ctx            context.Context
	AccountID      string
	OrganizationID string
} {
	var calls []struct {
		Ctx            context.Context
		AccountID      string
		OrganizationID string
	}
	mock.lockOrganizationAccountList.RLock()
	calls = mock.calls.OrganizationAccountList
	mock.lockOrganizationAccountList.RUnlock()
	return calls
}

// OrganizationAccountTransferOwnership calls OrganizationAccountTransferOwnershipFunc.
func (mock *ServiceMock) OrganizationAccountTransferOwnership(ctx context.Context, accountID string, transferOwnershipDTO *dto.OrganizationAccountTransferOwnership) (int, error) {
	if mock.OrganizationAccountTransferOwnershipFunc == nil {
		panic("ServiceMock.OrganizationAccountTransferOwnershipFunc: method is nil but Service.OrganizationAccountTransferOwnership was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		AccountID            string
		TransferOwnershipDTO *dto.OrganizationAccountTransferOwnership
	}{
		Ctx:                  ctx,
		AccountID:            accountID,
		TransferOwnershipDTO: transferOwnershipDTO,
	}
	mock.lockOrganizationAccountTransferOwnership.Lock()
	mock.calls.OrganizationAccountTransferOwnership = append(mock.calls.OrganizationAccountTransferOwnership, callInfo)
	mock.lockOrganizationAccountTransferOwnership.Unlock()
	return mock.OrganizationAccountTransferOwnershipFunc(ctx, accountID, transferOwnershipDTO)
}

// OrganizationAccountTransferOwnershipCalls gets all the calls that were made to OrganizationAccountTransferOwnership.
// Check the length with:
//
//	len(mockedService.OrganizationAccountTransferOwnershipCalls())
func (mock *ServiceMock) OrganizationAccountTransferOwnershipCalls() []struct {
	Ctx                  context.Context
	AccountID            string
	TransferOwnershipDTO *dto.OrganizationAccountTransferOwnership
} {
	var calls []struct {
		Ctx                  context.Context
		AccountID            string
		TransferOwnershipDTO *dto.OrganizationAccountTransferOwnership
	}
	mock.lockOrganizationAccountTransferOwnership.RLock()
	calls = mock.calls.OrganizationAccountTransferOwnership
	mock.lockOrganizationAccountTransferOwnership.RUnlock()
	return calls
}

// OrganizationCreate calls OrganizationCreateFunc.
func (mock *ServiceMock) OrganizationCreate(ctx context.Context, orgCreateDTO *dto.OrganizationCreate) (*dto.OrganizationResult, int, error) {
	if mock.OrganizationCreateFunc == nil {
		panic("ServiceMock.OrganizationCreateFunc: method is nil but Service.OrganizationCreate was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		OrgCreateDTO *dto.OrganizationCreate
	}{
		Ctx:          ctx,
		OrgCreateDTO: orgCreateDTO,
	}
	mock.lockOrganizationCreate.Lock()
	mock.calls.OrganizationCreate = append(mock.calls.OrganizationCreate, callInfo)
	mock.lockOrganizationCreate.Unlock()
	return mock.OrganizationCreateFunc(ctx, orgCreateDTO)
}

// OrganizationCreateCalls gets all the calls that were made to OrganizationCreate.
// Check the length with:
//
//	len(mockedService.OrganizationCreateCalls())
func (mock *ServiceMock) OrganizationCreateCalls() []struct {
	Ctx          context.Context
	OrgCreateDTO *dto.OrganizationCreate
} {
	var calls []struct {
		Ctx          context.Context
		OrgCreateDTO *dto.OrganizationCreate
	}
	mock.lockOrganizationCreate.RLock()
	calls = mock.calls.OrganizationCreate
	mock.lockOrganizationCreate.RUnlock()
	return calls
}

// OrganizationInvitationCancel calls OrganizationInvitationCancelFunc.
func (mock *ServiceMock) OrganizationInvitationCancel(ctx context.Context, accountID string, cancelInvitation *dto.OrganizationInvitationCancel) (int, error) {
	if mock.OrganizationInvitationCancelFunc == nil {
		panic("ServiceMock.OrganizationInvitationCancelFunc: method is nil but Service.OrganizationInvitationCancel was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AccountID        string
		CancelInvitation *dto.OrganizationInvitationCancel
	}{
		Ctx:              ctx,
		AccountID:        accountID,
		CancelInvitation: cancelInvitation,
	}
	mock.lockOrganizationInvitationCancel.Lock()
	mock.calls.OrganizationInvitationCancel = append(mock.calls.OrganizationInvitationCancel, callInfo)
	mock.lockOrganizationInvitationCancel.Unlock()
	return mock.OrganizationInvitationCancelFunc(ctx, accountID, cancelInvitation)
}

// OrganizationInvitationCancelCalls gets all the calls that were made to OrganizationInvitationCancel.
// Check the length with:
//
//	len(mockedService.OrganizationInvitationCancelCalls())
func (mock *ServiceMock) OrganizationInvitationCancelCalls() []struct {
	Ctx              context.Context
	AccountID        string
	CancelInvitation *dto.OrganizationInvitationCancel
} {
	var calls []struct {
		Ctx              context.Context
		AccountID        string
		CancelInvitation *dto.OrganizationInvitationCancel
	}
	mock.lockOrganizationInvitationCancel.RLock()
	calls = mock.calls.OrganizationInvitationCancel
	mock.lockOrganizationInvitationCancel.RUnlock()
	return calls
}

// OrganizationInvitationConsume calls OrganizationInvitationConsumeFunc.
func (mock *ServiceMock) OrganizationInvitationConsume(ctx context.Context, consumeInvitationDTO *dto.OrganizationInvitationConsume) (*dto.AccountLoginResult, int, error) {
	if mock.OrganizationInvitationConsumeFunc == nil {
		panic("ServiceMock.OrganizationInvitationConsumeFunc: method is nil but Service.OrganizationInvitationConsume was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		ConsumeInvitationDTO *dto.OrganizationInvitationConsume
	}{
		Ctx:                  ctx,
		ConsumeInvitationDTO: consumeInvitationDTO,
	}
	mock.lockOrganizationInvitationConsume.Lock()
	mock.calls.OrganizationInvitationConsume = append(mock.calls.OrganizationInvitationConsume, callInfo)
	mock.lockOrganizationInvitationConsume.Unlock()
	return mock.OrganizationInvitationConsumeFunc(ctx, consumeInvitationDTO)
}

// OrganizationInvitationConsumeCalls gets all the calls that were made to OrganizationInvitationConsume.
// Check the length with:
//
//	len(mockedService.OrganizationInvitationConsumeCalls())
func (mock *ServiceMock) OrganizationInvitationConsumeCalls() []struct {
	Ctx                  context.Context
	ConsumeInvitationDTO *dto.OrganizationInvitationConsume
} {
	var calls []struct {
		Ctx                  context.Context
		ConsumeInvitationDTO *dto.OrganizationInvitationConsume
	}
	mock.lockOrganizationInvitationConsume.RLock()
	calls = mock.calls.OrganizationInvitationConsume
	mock.lockOrganizationInvitationConsume.RUnlock()
	return calls
}

// OrganizationInvitationCreate calls OrganizationInvitationCreateFunc.
func (mock *ServiceMock) OrganizationInvitationCreate(ctx context.Context, accountInvitationDTO *dto.OrganizationInvitation) (int, error) {
	if mock.OrganizationInvitationCreateFunc == nil {
		panic("ServiceMock.OrganizationInvitationCreateFunc: method is nil but Service.OrganizationInvitationCreate was just called")
	}
	callInfo := struct {
		Ctx                  context.Context
		AccountInvitationDTO *dto.OrganizationInvitation
	}{
		Ctx:                  ctx,
		AccountInvitationDTO: accountInvitationDTO,
	}
	mock.lockOrganizationInvitationCreate.Lock()
	mock.calls.OrganizationInvitationCreate = append(mock.calls.OrganizationInvitationCreate, callInfo)
	mock.lockOrganizationInvitationCreate.Unlock()
	return mock.OrganizationInvitationCreateFunc(ctx, accountInvitationDTO)
}

// OrganizationInvitationCreateCalls gets all the calls that were made to OrganizationInvitationCreate.
// Check the length with:
//
//	len(mockedService.OrganizationInvitationCreateCalls())
func (mock *ServiceMock) OrganizationInvitationCreateCalls() []struct {
	Ctx                  context.Context
	AccountInvitationDTO *dto.OrganizationInvitation
} {
	var calls []struct {
		Ctx                  context.Context
		AccountInvitationDTO *dto.OrganizationInvitation
	}
	mock.lockOrganizationInvitationCreate.RLock()
	calls = mock.calls.OrganizationInvitationCreate
	mock.lockOrganizationInvitationCreate.RUnlock()
	return calls
}

// OrganizationInvitationList calls OrganizationInvitationListFunc.
func (mock *ServiceMock) OrganizationInvitationList(ctx context.Context, accountID string, organizationID string) (*dto.OrganizationInvitationListResult, int, error) {
	if mock.OrganizationInvitationListFunc == nil {
		panic("ServiceMock.OrganizationInvitationListFunc: method is nil but Service.OrganizationInvitationList was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AccountID      string
		OrganizationID string
	}{
		Ctx:            ctx,
		AccountID:      accountID,
		OrganizationID: organizationID,
	}
	mock.lockOrganizationInvitationList.Lock()
	mock.calls.OrganizationInvitationList = append(mock.calls.OrganizationInvitationList, callInfo)
	mock.lockOrganizationInvitationList.Unlock()
	return mock.OrganizationInvitationListFunc(ctx, accountID, organizationID)
}

// OrganizationInvitationListCalls gets all the calls that were made to OrganizationInvitationList.
// Check the length with:
//
//	len(mockedService.OrganizationInvitationListCalls())
func (mock *ServiceMock) OrganizationInvitationListCalls() []struct {
	Ctx            context.Context
	AccountID      string
	OrganizationID string
} {
	var calls []struct {
		Ctx            context.Context
		AccountID      string
		OrganizationID string
	}
	mock.lockOrganizationInvitationList.RLock()
	calls = mock.calls.OrganizationInvitationList
	mock.lockOrganizationInvitationList.RUnlock()
	return calls
}

// OrganizationInvitationRead calls OrganizationInvitationReadFunc.
func (mock *ServiceMock) OrganizationInvitationRead(ctx context.Context, token string) (*dto.OrganizationInvitationReadResult, int, error) {
	if mock.OrganizationInvitationReadFunc == nil {
		panic("ServiceMock.OrganizationInvitationReadFunc: method is nil but Service.OrganizationInvitationRead was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Token string
	}{
		Ctx:   ctx,
		Token: token,
	}
	mock.lockOrganizationInvitationRead.Lock()
	mock.calls.OrganizationInvitationRead = append(mock.calls.OrganizationInvitationRead, callInfo)
	mock.lockOrganizationInvitationRead.Unlock()
	return mock.OrganizationInvitationReadFunc(ctx, token)
}

// OrganizationInvitationReadCalls gets all the calls that were made to OrganizationInvitationRead.
// Check the length with:
//
//	len(mockedService.OrganizationInvitationReadCalls())
func (mock *ServiceMock) OrganizationInvitationReadCalls() []struct {
	Ctx   context.Context
	Token string
} {
	var calls []struct {
		Ctx   context.Context
		Token string
	}
	mock.lockOrganizationInvitationRead.RLock()
	calls = mock.calls.OrganizationInvitationRead
	mock.lockOrganizationInvitationRead.RUnlock()
	return calls
}

// OrganizationList calls OrganizationListFunc.
func (mock *ServiceMock) OrganizationList(ctx context.Context, accountID string) (*dto.OrganizationListResult, int, error) {
	if mock.OrganizationListFunc == nil {
		panic("ServiceMock.OrganizationListFunc: method is nil but Service.OrganizationList was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
	}{
		Ctx:       ctx,
		AccountID: accountID,
	}
	mock.lockOrganizationList.Lock()
	mock.calls.OrganizationList = append(mock.calls.OrganizationList, callInfo)
	mock.lockOrganizationList.Unlock()
	return mock.OrganizationListFunc(ctx, accountID)
}

// OrganizationListCalls gets all the calls that were made to OrganizationList.
// Check the length with:
//
//	len(mockedService.OrganizationListCalls())
func (mock *ServiceMock) OrganizationListCalls() []struct {
	Ctx       context.Context
	AccountID string
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
	}
	mock.lockOrganizationList.RLock()
	calls = mock.calls.OrganizationList
	mock.lockOrganizationList.RUnlock()
	return calls
}

// OrganizationSetProfile calls OrganizationSetProfileFunc.
func (mock *ServiceMock) OrganizationSetProfile(ctx context.Context, accountID string, orgProfileDTO *dto.OrganizationProfile) (*dto.OrganizationResult, int, error) {
	if mock.OrganizationSetProfileFunc == nil {
		panic("ServiceMock.OrganizationSetProfileFunc: method is nil but Service.OrganizationSetProfile was just called")
	}
	callInfo := struct {
		Ctx           context.Context
		AccountID     string
		OrgProfileDTO *dto.OrganizationProfile
	}{
		Ctx:           ctx,
		AccountID:     accountID,
		OrgProfileDTO: orgProfileDTO,
	}
	mock.lockOrganizationSetProfile.Lock()
	mock.calls.OrganizationSetProfile = append(mock.calls.OrganizationSetProfile, callInfo)
	mock.lockOrganizationSetProfile.Unlock()
	return mock.OrganizationSetProfileFunc(ctx, accountID, orgProfileDTO)
}

// OrganizationSetProfileCalls gets all the calls that were made to OrganizationSetProfile.
// Check the length with:
//
//	len(mockedService.OrganizationSetProfileCalls())
func (mock *ServiceMock) OrganizationSetProfileCalls() []struct {
	Ctx           context.Context
	AccountID     string
	OrgProfileDTO *dto.OrganizationProfile
} {
	var calls []struct {
		Ctx           context.Context
		AccountID     string
		OrgProfileDTO *dto.OrganizationProfile
	}
	mock.lockOrganizationSetProfile.RLock()
	calls = mock.calls.OrganizationSetProfile
	mock.lockOrganizationSetProfile.RUnlock()
	return calls
}

// SegmentCreate calls SegmentCreateFunc.
func (mock *ServiceMock) SegmentCreate(ctx context.Context, accountID string, segmentDTO *dto.Segment) (int, error) {
	if mock.SegmentCreateFunc == nil {
		panic("ServiceMock.SegmentCreateFunc: method is nil but Service.SegmentCreate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		AccountID  string
		SegmentDTO *dto.Segment
	}{
		Ctx:        ctx,
		AccountID:  accountID,
		SegmentDTO: segmentDTO,
	}
	mock.lockSegmentCreate.Lock()
	mock.calls.SegmentCreate = append(mock.calls.SegmentCreate, callInfo)
	mock.lockSegmentCreate.Unlock()
	return mock.SegmentCreateFunc(ctx, accountID, segmentDTO)
}

// SegmentCreateCalls gets all the calls that were made to SegmentCreate.
// Check the length with:
//
//	len(mockedService.SegmentCreateCalls())
func (mock *ServiceMock) SegmentCreateCalls() []struct {
	Ctx        context.Context
	AccountID  string
	SegmentDTO *dto.Segment
} {
	var calls []struct {
		Ctx        context.Context
		AccountID  string
		SegmentDTO *dto.Segment
	}
	mock.lockSegmentCreate.RLock()
	calls = mock.calls.SegmentCreate
	mock.lockSegmentCreate.RUnlock()
	return calls
}

// SegmentDelete calls SegmentDeleteFunc.
func (mock *ServiceMock) SegmentDelete(ctx context.Context, accountID string, deleteSegmentDTO *dto.DeleteSegment) (int, error) {
	if mock.SegmentDeleteFunc == nil {
		panic("ServiceMock.SegmentDeleteFunc: method is nil but Service.SegmentDelete was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AccountID        string
		DeleteSegmentDTO *dto.DeleteSegment
	}{
		Ctx:              ctx,
		AccountID:        accountID,
		DeleteSegmentDTO: deleteSegmentDTO,
	}
	mock.lockSegmentDelete.Lock()
	mock.calls.SegmentDelete = append(mock.calls.SegmentDelete, callInfo)
	mock.lockSegmentDelete.Unlock()
	return mock.SegmentDeleteFunc(ctx, accountID, deleteSegmentDTO)
}

// SegmentDeleteCalls gets all the calls that were made to SegmentDelete.
// Check the length with:
//
//	len(mockedService.SegmentDeleteCalls())
func (mock *ServiceMock) SegmentDeleteCalls() []struct {
	Ctx              context.Context
	AccountID        string
	DeleteSegmentDTO *dto.DeleteSegment
} {
	var calls []struct {
		Ctx              context.Context
		AccountID        string
		DeleteSegmentDTO *dto.DeleteSegment
	}
	mock.lockSegmentDelete.RLock()
	calls = mock.calls.SegmentDelete
	mock.lockSegmentDelete.RUnlock()
	return calls
}

// SegmentList calls SegmentListFunc.
func (mock *ServiceMock) SegmentList(ctx context.Context, accountID string, params *dto.SegmentListParams) (*dto.SegmentListResult, int, error) {
	if mock.SegmentListFunc == nil {
		panic("ServiceMock.SegmentListFunc: method is nil but Service.SegmentList was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.SegmentListParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockSegmentList.Lock()
	mock.calls.SegmentList = append(mock.calls.SegmentList, callInfo)
	mock.lockSegmentList.Unlock()
	return mock.SegmentListFunc(ctx, accountID, params)
}

// SegmentListCalls gets all the calls that were made to SegmentList.
// Check the length with:
//
//	len(mockedService.SegmentListCalls())
func (mock *ServiceMock) SegmentListCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.SegmentListParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.SegmentListParams
	}
	mock.lockSegmentList.RLock()
	calls = mock.calls.SegmentList
	mock.lockSegmentList.RUnlock()
	return calls
}

// SegmentPreview calls SegmentPreviewFunc.
func (mock *ServiceMock) SegmentPreview(ctx context.Context, accountID string, params *dto.SegmentPreviewParams) (*dto.SegmentPreviewResult, int, error) {
	if mock.SegmentPreviewFunc == nil {
		panic("ServiceMock.SegmentPreviewFunc: method is nil but Service.SegmentPreview was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.SegmentPreviewParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockSegmentPreview.Lock()
	mock.calls.SegmentPreview = append(mock.calls.SegmentPreview, callInfo)
	mock.lockSegmentPreview.Unlock()
	return mock.SegmentPreviewFunc(ctx, accountID, params)
}

// SegmentPreviewCalls gets all the calls that were made to SegmentPreview.
// Check the length with:
//
//	len(mockedService.SegmentPreviewCalls())
func (mock *ServiceMock) SegmentPreviewCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.SegmentPreviewParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.SegmentPreviewParams
	}
	mock.lockSegmentPreview.RLock()
	calls = mock.calls.SegmentPreview
	mock.lockSegmentPreview.RUnlock()
	return calls
}

// SegmentUpdate calls SegmentUpdateFunc.
func (mock *ServiceMock) SegmentUpdate(ctx context.Context, accountID string, segmentDTO *dto.Segment) (int, error) {
	if mock.SegmentUpdateFunc == nil {
		panic("ServiceMock.SegmentUpdateFunc: method is nil but Service.SegmentUpdate was just called")
	}
	callInfo := struct {
		Ctx        context.Context
		AccountID  string
		SegmentDTO *dto.Segment
	}{
		Ctx:        ctx,
		AccountID:  accountID,
		SegmentDTO: segmentDTO,
	}
	mock.lockSegmentUpdate.Lock()
	mock.calls.SegmentUpdate = append(mock.calls.SegmentUpdate, callInfo)
	mock.lockSegmentUpdate.Unlock()
	return mock.SegmentUpdateFunc(ctx, accountID, segmentDTO)
}

// SegmentUpdateCalls gets all the calls that were made to SegmentUpdate.
// Check the length with:
//
//	len(mockedService.SegmentUpdateCalls())
func (mock *ServiceMock) SegmentUpdateCalls() []struct {
	Ctx        context.Context
	AccountID  string
	SegmentDTO *dto.Segment
} {
	var calls []struct {
		Ctx        context.Context
		AccountID  string
		SegmentDTO *dto.Segment
	}
	mock.lockSegmentUpdate.RLock()
	calls = mock.calls.SegmentUpdate
	mock.lockSegmentUpdate.RUnlock()
	return calls
}

// SendSystemEmail calls SendSystemEmailFunc.
func (mock *ServiceMock) SendSystemEmail(ctx context.Context, systemEmail *dto.SystemEmail) error {
	if mock.SendSystemEmailFunc == nil {
		panic("ServiceMock.SendSystemEmailFunc: method is nil but Service.SendSystemEmail was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		SystemEmail *dto.SystemEmail
	}{
		Ctx:         ctx,
		SystemEmail: systemEmail,
	}
	mock.lockSendSystemEmail.Lock()
	mock.calls.SendSystemEmail = append(mock.calls.SendSystemEmail, callInfo)
	mock.lockSendSystemEmail.Unlock()
	return mock.SendSystemEmailFunc(ctx, systemEmail)
}

// SendSystemEmailCalls gets all the calls that were made to SendSystemEmail.
// Check the length with:
//
//	len(mockedService.SendSystemEmailCalls())
func (mock *ServiceMock) SendSystemEmailCalls() []struct {
	Ctx         context.Context
	SystemEmail *dto.SystemEmail
} {
	var calls []struct {
		Ctx         context.Context
		SystemEmail *dto.SystemEmail
	}
	mock.lockSendSystemEmail.RLock()
	calls = mock.calls.SendSystemEmail
	mock.lockSendSystemEmail.RUnlock()
	return calls
}

// TaskExecAbort calls TaskExecAbortFunc.
func (mock *ServiceMock) TaskExecAbort(ctx context.Context, accountID string, params *dto.TaskExecAbortParams) (int, error) {
	if mock.TaskExecAbortFunc == nil {
		panic("ServiceMock.TaskExecAbortFunc: method is nil but Service.TaskExecAbort was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskExecAbortParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockTaskExecAbort.Lock()
	mock.calls.TaskExecAbort = append(mock.calls.TaskExecAbort, callInfo)
	mock.lockTaskExecAbort.Unlock()
	return mock.TaskExecAbortFunc(ctx, accountID, params)
}

// TaskExecAbortCalls gets all the calls that were made to TaskExecAbort.
// Check the length with:
//
//	len(mockedService.TaskExecAbortCalls())
func (mock *ServiceMock) TaskExecAbortCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.TaskExecAbortParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskExecAbortParams
	}
	mock.lockTaskExecAbort.RLock()
	calls = mock.calls.TaskExecAbort
	mock.lockTaskExecAbort.RUnlock()
	return calls
}

// TaskExecCreate calls TaskExecCreateFunc.
func (mock *ServiceMock) TaskExecCreate(ctx context.Context, accountID string, params *dto.TaskExecCreateParams) (int, error) {
	if mock.TaskExecCreateFunc == nil {
		panic("ServiceMock.TaskExecCreateFunc: method is nil but Service.TaskExecCreate was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskExecCreateParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockTaskExecCreate.Lock()
	mock.calls.TaskExecCreate = append(mock.calls.TaskExecCreate, callInfo)
	mock.lockTaskExecCreate.Unlock()
	return mock.TaskExecCreateFunc(ctx, accountID, params)
}

// TaskExecCreateCalls gets all the calls that were made to TaskExecCreate.
// Check the length with:
//
//	len(mockedService.TaskExecCreateCalls())
func (mock *ServiceMock) TaskExecCreateCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.TaskExecCreateParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskExecCreateParams
	}
	mock.lockTaskExecCreate.RLock()
	calls = mock.calls.TaskExecCreate
	mock.lockTaskExecCreate.RUnlock()
	return calls
}

// TaskExecDo calls TaskExecDoFunc.
func (mock *ServiceMock) TaskExecDo(ctx context.Context, workspaceID string, payload *dto.TaskExecRequestPayload) *common.DataLogInQueueResult {
	if mock.TaskExecDoFunc == nil {
		panic("ServiceMock.TaskExecDoFunc: method is nil but Service.TaskExecDo was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		WorkspaceID string
		Payload     *dto.TaskExecRequestPayload
	}{
		Ctx:         ctx,
		WorkspaceID: workspaceID,
		Payload:     payload,
	}
	mock.lockTaskExecDo.Lock()
	mock.calls.TaskExecDo = append(mock.calls.TaskExecDo, callInfo)
	mock.lockTaskExecDo.Unlock()
	return mock.TaskExecDoFunc(ctx, workspaceID, payload)
}

// TaskExecDoCalls gets all the calls that were made to TaskExecDo.
// Check the length with:
//
//	len(mockedService.TaskExecDoCalls())
func (mock *ServiceMock) TaskExecDoCalls() []struct {
	Ctx         context.Context
	WorkspaceID string
	Payload     *dto.TaskExecRequestPayload
} {
	var calls []struct {
		Ctx         context.Context
		WorkspaceID string
		Payload     *dto.TaskExecRequestPayload
	}
	mock.lockTaskExecDo.RLock()
	calls = mock.calls.TaskExecDo
	mock.lockTaskExecDo.RUnlock()
	return calls
}

// TaskExecJobInfo calls TaskExecJobInfoFunc.
func (mock *ServiceMock) TaskExecJobInfo(ctx context.Context, accountID string, params *dto.TaskExecJobInfoParams) (*dto.TaskExecJobInfoInfo, int, error) {
	if mock.TaskExecJobInfoFunc == nil {
		panic("ServiceMock.TaskExecJobInfoFunc: method is nil but Service.TaskExecJobInfo was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskExecJobInfoParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockTaskExecJobInfo.Lock()
	mock.calls.TaskExecJobInfo = append(mock.calls.TaskExecJobInfo, callInfo)
	mock.lockTaskExecJobInfo.Unlock()
	return mock.TaskExecJobInfoFunc(ctx, accountID, params)
}

// TaskExecJobInfoCalls gets all the calls that were made to TaskExecJobInfo.
// Check the length with:
//
//	len(mockedService.TaskExecJobInfoCalls())
func (mock *ServiceMock) TaskExecJobInfoCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.TaskExecJobInfoParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskExecJobInfoParams
	}
	mock.lockTaskExecJobInfo.RLock()
	calls = mock.calls.TaskExecJobInfo
	mock.lockTaskExecJobInfo.RUnlock()
	return calls
}

// TaskExecJobs calls TaskExecJobsFunc.
func (mock *ServiceMock) TaskExecJobs(ctx context.Context, accountID string, params *dto.TaskExecJobsParams) (*dto.TaskExecJobsResult, int, error) {
	if mock.TaskExecJobsFunc == nil {
		panic("ServiceMock.TaskExecJobsFunc: method is nil but Service.TaskExecJobs was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskExecJobsParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockTaskExecJobs.Lock()
	mock.calls.TaskExecJobs = append(mock.calls.TaskExecJobs, callInfo)
	mock.lockTaskExecJobs.Unlock()
	return mock.TaskExecJobsFunc(ctx, accountID, params)
}

// TaskExecJobsCalls gets all the calls that were made to TaskExecJobs.
// Check the length with:
//
//	len(mockedService.TaskExecJobsCalls())
func (mock *ServiceMock) TaskExecJobsCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.TaskExecJobsParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskExecJobsParams
	}
	mock.lockTaskExecJobs.RLock()
	calls = mock.calls.TaskExecJobs
	mock.lockTaskExecJobs.RUnlock()
	return calls
}

// TaskExecList calls TaskExecListFunc.
func (mock *ServiceMock) TaskExecList(ctx context.Context, accountID string, params *dto.TaskExecListParams) (*dto.TaskExecListResult, int, error) {
	if mock.TaskExecListFunc == nil {
		panic("ServiceMock.TaskExecListFunc: method is nil but Service.TaskExecList was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskExecListParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockTaskExecList.Lock()
	mock.calls.TaskExecList = append(mock.calls.TaskExecList, callInfo)
	mock.lockTaskExecList.Unlock()
	return mock.TaskExecListFunc(ctx, accountID, params)
}

// TaskExecListCalls gets all the calls that were made to TaskExecList.
// Check the length with:
//
//	len(mockedService.TaskExecListCalls())
func (mock *ServiceMock) TaskExecListCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.TaskExecListParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskExecListParams
	}
	mock.lockTaskExecList.RLock()
	calls = mock.calls.TaskExecList
	mock.lockTaskExecList.RUnlock()
	return calls
}

// TaskList calls TaskListFunc.
func (mock *ServiceMock) TaskList(ctx context.Context, accountID string, params *dto.TaskListParams) (*dto.TaskListResult, int, error) {
	if mock.TaskListFunc == nil {
		panic("ServiceMock.TaskListFunc: method is nil but Service.TaskList was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskListParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockTaskList.Lock()
	mock.calls.TaskList = append(mock.calls.TaskList, callInfo)
	mock.lockTaskList.Unlock()
	return mock.TaskListFunc(ctx, accountID, params)
}

// TaskListCalls gets all the calls that were made to TaskList.
// Check the length with:
//
//	len(mockedService.TaskListCalls())
func (mock *ServiceMock) TaskListCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.TaskListParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskListParams
	}
	mock.lockTaskList.RLock()
	calls = mock.calls.TaskList
	mock.lockTaskList.RUnlock()
	return calls
}

// TaskRun calls TaskRunFunc.
func (mock *ServiceMock) TaskRun(ctx context.Context, accountID string, params *dto.TaskRunParams) (int, error) {
	if mock.TaskRunFunc == nil {
		panic("ServiceMock.TaskRunFunc: method is nil but Service.TaskRun was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskRunParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockTaskRun.Lock()
	mock.calls.TaskRun = append(mock.calls.TaskRun, callInfo)
	mock.lockTaskRun.Unlock()
	return mock.TaskRunFunc(ctx, accountID, params)
}

// TaskRunCalls gets all the calls that were made to TaskRun.
// Check the length with:
//
//	len(mockedService.TaskRunCalls())
func (mock *ServiceMock) TaskRunCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.TaskRunParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.TaskRunParams
	}
	mock.lockTaskRun.RLock()
	calls = mock.calls.TaskRun
	mock.lockTaskRun.RUnlock()
	return calls
}

// TaskWakeUpCron calls TaskWakeUpCronFunc.
func (mock *ServiceMock) TaskWakeUpCron(ctx context.Context) (int, error) {
	if mock.TaskWakeUpCronFunc == nil {
		panic("ServiceMock.TaskWakeUpCronFunc: method is nil but Service.TaskWakeUpCron was just called")
	}
	callInfo := struct {
		Ctx context.Context
	}{
		Ctx: ctx,
	}
	mock.lockTaskWakeUpCron.Lock()
	mock.calls.TaskWakeUpCron = append(mock.calls.TaskWakeUpCron, callInfo)
	mock.lockTaskWakeUpCron.Unlock()
	return mock.TaskWakeUpCronFunc(ctx)
}

// TaskWakeUpCronCalls gets all the calls that were made to TaskWakeUpCron.
// Check the length with:
//
//	len(mockedService.TaskWakeUpCronCalls())
func (mock *ServiceMock) TaskWakeUpCronCalls() []struct {
	Ctx context.Context
} {
	var calls []struct {
		Ctx context.Context
	}
	mock.lockTaskWakeUpCron.RLock()
	calls = mock.calls.TaskWakeUpCron
	mock.lockTaskWakeUpCron.RUnlock()
	return calls
}

// UserList calls UserListFunc.
func (mock *ServiceMock) UserList(ctx context.Context, accountID string, params *dto.UserListParams) (*dto.UserListResult, int, error) {
	if mock.UserListFunc == nil {
		panic("ServiceMock.UserListFunc: method is nil but Service.UserList was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.UserListParams
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Params:    params,
	}
	mock.lockUserList.Lock()
	mock.calls.UserList = append(mock.calls.UserList, callInfo)
	mock.lockUserList.Unlock()
	return mock.UserListFunc(ctx, accountID, params)
}

// UserListCalls gets all the calls that were made to UserList.
// Check the length with:
//
//	len(mockedService.UserListCalls())
func (mock *ServiceMock) UserListCalls() []struct {
	Ctx       context.Context
	AccountID string
	Params    *dto.UserListParams
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Params    *dto.UserListParams
	}
	mock.lockUserList.RLock()
	calls = mock.calls.UserList
	mock.lockUserList.RUnlock()
	return calls
}

// UserShow calls UserShowFunc.
func (mock *ServiceMock) UserShow(ctx context.Context, workspaceID string, accountID string, userExternalID string) (*dto.UserShowResult, int, error) {
	if mock.UserShowFunc == nil {
		panic("ServiceMock.UserShowFunc: method is nil but Service.UserShow was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		WorkspaceID    string
		AccountID      string
		UserExternalID string
	}{
		Ctx:            ctx,
		WorkspaceID:    workspaceID,
		AccountID:      accountID,
		UserExternalID: userExternalID,
	}
	mock.lockUserShow.Lock()
	mock.calls.UserShow = append(mock.calls.UserShow, callInfo)
	mock.lockUserShow.Unlock()
	return mock.UserShowFunc(ctx, workspaceID, accountID, userExternalID)
}

// UserShowCalls gets all the calls that were made to UserShow.
// Check the length with:
//
//	len(mockedService.UserShowCalls())
func (mock *ServiceMock) UserShowCalls() []struct {
	Ctx            context.Context
	WorkspaceID    string
	AccountID      string
	UserExternalID string
} {
	var calls []struct {
		Ctx            context.Context
		WorkspaceID    string
		AccountID      string
		UserExternalID string
	}
	mock.lockUserShow.RLock()
	calls = mock.calls.UserShow
	mock.lockUserShow.RUnlock()
	return calls
}

// WorkspaceCreate calls WorkspaceCreateFunc.
func (mock *ServiceMock) WorkspaceCreate(ctx context.Context, accountID string, workspaceDTO *dto.WorkspaceCreate) (*entity.Workspace, int, error) {
	if mock.WorkspaceCreateFunc == nil {
		panic("ServiceMock.WorkspaceCreateFunc: method is nil but Service.WorkspaceCreate was just called")
	}
	callInfo := struct {
		Ctx          context.Context
		AccountID    string
		WorkspaceDTO *dto.WorkspaceCreate
	}{
		Ctx:          ctx,
		AccountID:    accountID,
		WorkspaceDTO: workspaceDTO,
	}
	mock.lockWorkspaceCreate.Lock()
	mock.calls.WorkspaceCreate = append(mock.calls.WorkspaceCreate, callInfo)
	mock.lockWorkspaceCreate.Unlock()
	return mock.WorkspaceCreateFunc(ctx, accountID, workspaceDTO)
}

// WorkspaceCreateCalls gets all the calls that were made to WorkspaceCreate.
// Check the length with:
//
//	len(mockedService.WorkspaceCreateCalls())
func (mock *ServiceMock) WorkspaceCreateCalls() []struct {
	Ctx          context.Context
	AccountID    string
	WorkspaceDTO *dto.WorkspaceCreate
} {
	var calls []struct {
		Ctx          context.Context
		AccountID    string
		WorkspaceDTO *dto.WorkspaceCreate
	}
	mock.lockWorkspaceCreate.RLock()
	calls = mock.calls.WorkspaceCreate
	mock.lockWorkspaceCreate.RUnlock()
	return calls
}

// WorkspaceCreateOrResetDemo calls WorkspaceCreateOrResetDemoFunc.
func (mock *ServiceMock) WorkspaceCreateOrResetDemo(ctx context.Context, accountID string, workspaceDemoDTO *dto.WorkspaceCreateOrResetDemo) (*entity.Workspace, int, error) {
	if mock.WorkspaceCreateOrResetDemoFunc == nil {
		panic("ServiceMock.WorkspaceCreateOrResetDemoFunc: method is nil but Service.WorkspaceCreateOrResetDemo was just called")
	}
	callInfo := struct {
		Ctx              context.Context
		AccountID        string
		WorkspaceDemoDTO *dto.WorkspaceCreateOrResetDemo
	}{
		Ctx:              ctx,
		AccountID:        accountID,
		WorkspaceDemoDTO: workspaceDemoDTO,
	}
	mock.lockWorkspaceCreateOrResetDemo.Lock()
	mock.calls.WorkspaceCreateOrResetDemo = append(mock.calls.WorkspaceCreateOrResetDemo, callInfo)
	mock.lockWorkspaceCreateOrResetDemo.Unlock()
	return mock.WorkspaceCreateOrResetDemoFunc(ctx, accountID, workspaceDemoDTO)
}

// WorkspaceCreateOrResetDemoCalls gets all the calls that were made to WorkspaceCreateOrResetDemo.
// Check the length with:
//
//	len(mockedService.WorkspaceCreateOrResetDemoCalls())
func (mock *ServiceMock) WorkspaceCreateOrResetDemoCalls() []struct {
	Ctx              context.Context
	AccountID        string
	WorkspaceDemoDTO *dto.WorkspaceCreateOrResetDemo
} {
	var calls []struct {
		Ctx              context.Context
		AccountID        string
		WorkspaceDemoDTO *dto.WorkspaceCreateOrResetDemo
	}
	mock.lockWorkspaceCreateOrResetDemo.RLock()
	calls = mock.calls.WorkspaceCreateOrResetDemo
	mock.lockWorkspaceCreateOrResetDemo.RUnlock()
	return calls
}

// WorkspaceGetSecretKey calls WorkspaceGetSecretKeyFunc.
func (mock *ServiceMock) WorkspaceGetSecretKey(ctx context.Context, accountID string, workspaceID string) (*dto.WorkspaceSecretKeyResult, int, error) {
	if mock.WorkspaceGetSecretKeyFunc == nil {
		panic("ServiceMock.WorkspaceGetSecretKeyFunc: method is nil but Service.WorkspaceGetSecretKey was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccountID   string
		WorkspaceID string
	}{
		Ctx:         ctx,
		AccountID:   accountID,
		WorkspaceID: workspaceID,
	}
	mock.lockWorkspaceGetSecretKey.Lock()
	mock.calls.WorkspaceGetSecretKey = append(mock.calls.WorkspaceGetSecretKey, callInfo)
	mock.lockWorkspaceGetSecretKey.Unlock()
	return mock.WorkspaceGetSecretKeyFunc(ctx, accountID, workspaceID)
}

// WorkspaceGetSecretKeyCalls gets all the calls that were made to WorkspaceGetSecretKey.
// Check the length with:
//
//	len(mockedService.WorkspaceGetSecretKeyCalls())
func (mock *ServiceMock) WorkspaceGetSecretKeyCalls() []struct {
	Ctx         context.Context
	AccountID   string
	WorkspaceID string
} {
	var calls []struct {
		Ctx         context.Context
		AccountID   string
		WorkspaceID string
	}
	mock.lockWorkspaceGetSecretKey.RLock()
	calls = mock.calls.WorkspaceGetSecretKey
	mock.lockWorkspaceGetSecretKey.RUnlock()
	return calls
}

// WorkspaceList calls WorkspaceListFunc.
func (mock *ServiceMock) WorkspaceList(ctx context.Context, accountID string, organizationID string) (*dto.WorkspaceListResult, int, error) {
	if mock.WorkspaceListFunc == nil {
		panic("ServiceMock.WorkspaceListFunc: method is nil but Service.WorkspaceList was just called")
	}
	callInfo := struct {
		Ctx            context.Context
		AccountID      string
		OrganizationID string
	}{
		Ctx:            ctx,
		AccountID:      accountID,
		OrganizationID: organizationID,
	}
	mock.lockWorkspaceList.Lock()
	mock.calls.WorkspaceList = append(mock.calls.WorkspaceList, callInfo)
	mock.lockWorkspaceList.Unlock()
	return mock.WorkspaceListFunc(ctx, accountID, organizationID)
}

// WorkspaceListCalls gets all the calls that were made to WorkspaceList.
// Check the length with:
//
//	len(mockedService.WorkspaceListCalls())
func (mock *ServiceMock) WorkspaceListCalls() []struct {
	Ctx            context.Context
	AccountID      string
	OrganizationID string
} {
	var calls []struct {
		Ctx            context.Context
		AccountID      string
		OrganizationID string
	}
	mock.lockWorkspaceList.RLock()
	calls = mock.calls.WorkspaceList
	mock.lockWorkspaceList.RUnlock()
	return calls
}

// WorkspaceShow calls WorkspaceShowFunc.
func (mock *ServiceMock) WorkspaceShow(ctx context.Context, accountID string, workspaceID string) (*dto.WorkspaceShowResult, int, error) {
	if mock.WorkspaceShowFunc == nil {
		panic("ServiceMock.WorkspaceShowFunc: method is nil but Service.WorkspaceShow was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccountID   string
		WorkspaceID string
	}{
		Ctx:         ctx,
		AccountID:   accountID,
		WorkspaceID: workspaceID,
	}
	mock.lockWorkspaceShow.Lock()
	mock.calls.WorkspaceShow = append(mock.calls.WorkspaceShow, callInfo)
	mock.lockWorkspaceShow.Unlock()
	return mock.WorkspaceShowFunc(ctx, accountID, workspaceID)
}

// WorkspaceShowCalls gets all the calls that were made to WorkspaceShow.
// Check the length with:
//
//	len(mockedService.WorkspaceShowCalls())
func (mock *ServiceMock) WorkspaceShowCalls() []struct {
	Ctx         context.Context
	AccountID   string
	WorkspaceID string
} {
	var calls []struct {
		Ctx         context.Context
		AccountID   string
		WorkspaceID string
	}
	mock.lockWorkspaceShow.RLock()
	calls = mock.calls.WorkspaceShow
	mock.lockWorkspaceShow.RUnlock()
	return calls
}

// WorkspaceShowTables calls WorkspaceShowTablesFunc.
func (mock *ServiceMock) WorkspaceShowTables(ctx context.Context, accountID string, workspaceID string) (*dto.WorkspaceShowTablesResult, int, error) {
	if mock.WorkspaceShowTablesFunc == nil {
		panic("ServiceMock.WorkspaceShowTablesFunc: method is nil but Service.WorkspaceShowTables was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		AccountID   string
		WorkspaceID string
	}{
		Ctx:         ctx,
		AccountID:   accountID,
		WorkspaceID: workspaceID,
	}
	mock.lockWorkspaceShowTables.Lock()
	mock.calls.WorkspaceShowTables = append(mock.calls.WorkspaceShowTables, callInfo)
	mock.lockWorkspaceShowTables.Unlock()
	return mock.WorkspaceShowTablesFunc(ctx, accountID, workspaceID)
}

// WorkspaceShowTablesCalls gets all the calls that were made to WorkspaceShowTables.
// Check the length with:
//
//	len(mockedService.WorkspaceShowTablesCalls())
func (mock *ServiceMock) WorkspaceShowTablesCalls() []struct {
	Ctx         context.Context
	AccountID   string
	WorkspaceID string
} {
	var calls []struct {
		Ctx         context.Context
		AccountID   string
		WorkspaceID string
	}
	mock.lockWorkspaceShowTables.RLock()
	calls = mock.calls.WorkspaceShowTables
	mock.lockWorkspaceShowTables.RUnlock()
	return calls
}

// WorkspaceUpdate calls WorkspaceUpdateFunc.
func (mock *ServiceMock) WorkspaceUpdate(ctx context.Context, accountID string, payload *dto.WorkspaceUpdate) (*entity.Workspace, int, error) {
	if mock.WorkspaceUpdateFunc == nil {
		panic("ServiceMock.WorkspaceUpdateFunc: method is nil but Service.WorkspaceUpdate was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		AccountID string
		Payload   *dto.WorkspaceUpdate
	}{
		Ctx:       ctx,
		AccountID: accountID,
		Payload:   payload,
	}
	mock.lockWorkspaceUpdate.Lock()
	mock.calls.WorkspaceUpdate = append(mock.calls.WorkspaceUpdate, callInfo)
	mock.lockWorkspaceUpdate.Unlock()
	return mock.WorkspaceUpdateFunc(ctx, accountID, payload)
}

// WorkspaceUpdateCalls gets all the calls that were made to WorkspaceUpdate.
// Check the length with:
//
//	len(mockedService.WorkspaceUpdateCalls())
func (mock *ServiceMock) WorkspaceUpdateCalls() []struct {
	Ctx       context.Context
	AccountID string
	Payload   *dto.WorkspaceUpdate
} {
	var calls []struct {
		Ctx       context.Context
		AccountID string
		Payload   *dto.WorkspaceUpdate
	}
	mock.lockWorkspaceUpdate.RLock()
	calls = mock.calls.WorkspaceUpdate
	mock.lockWorkspaceUpdate.RUnlock()
	return calls
}
