// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mailer

import (
	"sync"
)

// Ensure, that MailerMock does implement Mailer.
// If this is not the case, regenerate this file with moq.
var _ Mailer = &MailerMock{}

// MailerMock is a mock implementation of Mailer.
//
// 	func TestSomethingThatUsesMailer(t *testing.T) {
//
// 		// make and configure a mocked Mailer
// 		mockedMailer := &MailerMock{
// 			SendHTMLMailFunc: func(to []string, subject string, body string) error {
// 				panic("mock out the SendHTMLMail method")
// 			},
// 		}
//
// 		// use mockedMailer in code that requires Mailer
// 		// and then make assertions.
//
// 	}
type MailerMock struct {
	// SendHTMLMailFunc mocks the SendHTMLMail method.
	SendHTMLMailFunc func(to []string, subject string, body string) error

	// calls tracks calls to the methods.
	calls struct {
		// SendHTMLMail holds details about calls to the SendHTMLMail method.
		SendHTMLMail []struct {
			// To is the to argument value.
			To []string
			// Subject is the subject argument value.
			Subject string
			// Body is the body argument value.
			Body string
		}
	}
	lockSendHTMLMail sync.RWMutex
}

// SendHTMLMail calls SendHTMLMailFunc.
func (mock *MailerMock) SendHTMLMail(to []string, subject string, body string) error {
	if mock.SendHTMLMailFunc == nil {
		panic("MailerMock.SendHTMLMailFunc: method is nil but Mailer.SendHTMLMail was just called")
	}
	callInfo := struct {
		To      []string
		Subject string
		Body    string
	}{
		To:      to,
		Subject: subject,
		Body:    body,
	}
	mock.lockSendHTMLMail.Lock()
	mock.calls.SendHTMLMail = append(mock.calls.SendHTMLMail, callInfo)
	mock.lockSendHTMLMail.Unlock()
	return mock.SendHTMLMailFunc(to, subject, body)
}

// SendHTMLMailCalls gets all the calls that were made to SendHTMLMail.
// Check the length with:
//     len(mockedMailer.SendHTMLMailCalls())
func (mock *MailerMock) SendHTMLMailCalls() []struct {
	To      []string
	Subject string
	Body    string
} {
	var calls []struct {
		To      []string
		Subject string
		Body    string
	}
	mock.lockSendHTMLMail.RLock()
	calls = mock.calls.SendHTMLMail
	mock.lockSendHTMLMail.RUnlock()
	return calls
}
